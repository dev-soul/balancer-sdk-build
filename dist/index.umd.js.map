{"version":3,"file":"index.umd.js","sources":["../src/pool-stable/encoder.ts","../src/pool-weighted/encoder.ts","../src/pool-weighted/normalizedWeights.ts","../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/pool-utils/poolId.ts","../src/lib/utils/errors.ts","../src/lib/utils/signatures.ts","../src/lib/utils/permit.ts","../src/lib/utils/assetHelpers.ts","../src/lib/utils/aaveHelpers.ts","../src/lib/utils/index.ts","../src/types.ts","../src/modules/swaps/types.ts","../src/modules/swaps/helpers.ts","../src/lib/constants/network.ts","../src/modules/swaps/queryBatchSwap.ts","../src/lib/constants/config.ts","../node_modules/tslib/tslib.es6.js","../node_modules/graphql-tag/lib/index.js","../src/modules/subgraph/generated/balancer-subgraph-types.ts","../src/modules/subgraph/subgraph.ts","../src/lib/utils/multiCaller.ts","../src/modules/sor/pool-data/onChainData.ts","../src/modules/sor/pool-data/subgraphPoolDataService.ts","../src/modules/sor/token-price/coingeckoTokenPriceService.ts","../src/modules/sor/token-price/subgraphTokenPriceService.ts","../src/modules/sdk.helpers.ts","../src/modules/sor/sor.module.ts","../src/modules/swaps/swaps.module.ts","../src/modules/relayer/extensions/boo-mirror-world-staking.service.ts","../src/modules/relayer/extensions/fbeets-bar-staking.service.ts","../src/modules/relayer/extensions/masterchef-staking.service.ts","../src/modules/relayer/extensions/yearn-wrapping.service.ts","../src/modules/relayer/extensions/aave-wrapping.service.ts","../src/modules/relayer/extensions/vault-actions.service.ts","../src/modules/relayer/relayer.module.ts","../src/modules/subgraph/subgraph.module.ts","../src/modules/sdk.module.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT,\n    TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePhantomPoolJoinKind {\n    INIT = 0,\n    COLLECT_PROTOCOL_FEES,\n}\n\nexport enum StablePoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\n    BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a StablePool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static joinInit = (amountsIn: BigNumberish[]): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256[]'],\n            [StablePoolJoinKind.INIT, amountsIn]\n        );\n\n    /**\n     * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n     */\n    static joinCollectProtocolFees = (): string =>\n        defaultAbiCoder.encode(\n            ['uint256'],\n            [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]\n        );\n\n    /**\n     * Encodes the userData parameter for joining a StablePool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static joinExactTokensInForBPTOut = (\n        amountsIn: BigNumberish[],\n        minimumBPT: BigNumberish\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256[]', 'uint256'],\n            [\n                StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n                amountsIn,\n                minimumBPT,\n            ]\n        );\n\n    /**\n     * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param enterTokenIndex - the index of the token to be provided as liquidity\n     */\n    static joinTokenInForExactBPTOut = (\n        bptAmountOut: BigNumberish,\n        enterTokenIndex: number\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256', 'uint256'],\n            [\n                StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n                bptAmountOut,\n                enterTokenIndex,\n            ]\n        );\n\n    /**\n     * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param enterTokenIndex - the index of the token to removed from the pool\n     */\n    static exitExactBPTInForOneTokenOut = (\n        bptAmountIn: BigNumberish,\n        exitTokenIndex: number\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256', 'uint256'],\n            [\n                StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n                bptAmountIn,\n                exitTokenIndex,\n            ]\n        );\n\n    /**\n     * Encodes the userData parameter for exiting a StablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256'],\n            [StablePoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n        );\n\n    /**\n     * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static exitBPTInForExactTokensOut = (\n        amountsOut: BigNumberish[],\n        maxBPTAmountIn: BigNumberish\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256[]', 'uint256'],\n            [\n                StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n                amountsOut,\n                maxBPTAmountIn,\n            ]\n        );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT,\n    TOKEN_IN_FOR_EXACT_BPT_OUT,\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum WeightedPoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\n    BPT_IN_FOR_EXACT_TOKENS_OUT,\n    MANAGEMENT_FEE_TOKENS_OUT,\n}\n\nexport class WeightedPoolEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static joinInit = (amountsIn: BigNumberish[]): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256[]'],\n            [WeightedPoolJoinKind.INIT, amountsIn]\n        );\n\n    /**\n     * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static joinExactTokensInForBPTOut = (\n        amountsIn: BigNumberish[],\n        minimumBPT: BigNumberish\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256[]', 'uint256'],\n            [\n                WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n                amountsIn,\n                minimumBPT,\n            ]\n        );\n\n    /**\n     * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param enterTokenIndex - the index of the token to be provided as liquidity\n     */\n    static joinTokenInForExactBPTOut = (\n        bptAmountOut: BigNumberish,\n        enterTokenIndex: number\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256', 'uint256'],\n            [\n                WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n                bptAmountOut,\n                enterTokenIndex,\n            ]\n        );\n\n    /**\n     * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     */\n    static joinAllTokensInForExactBPTOut = (\n        bptAmountOut: BigNumberish\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256'],\n            [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n        );\n\n    /**\n     * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param enterTokenIndex - the index of the token to removed from the pool\n     */\n    static exitExactBPTInForOneTokenOut = (\n        bptAmountIn: BigNumberish,\n        exitTokenIndex: number\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256', 'uint256'],\n            [\n                WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n                bptAmountIn,\n                exitTokenIndex,\n            ]\n        );\n\n    /**\n     * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256'],\n            [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n        );\n\n    /**\n     * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static exitBPTInForExactTokensOut = (\n        amountsOut: BigNumberish[],\n        maxBPTAmountIn: BigNumberish\n    ): string =>\n        defaultAbiCoder.encode(\n            ['uint256', 'uint256[]', 'uint256'],\n            [\n                WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n                amountsOut,\n                maxBPTAmountIn,\n            ]\n        );\n}\n\nexport class ManagedPoolEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the userData parameter for exiting a ManagedPool for withdrawing management fees.\n     * This can only be done by the pool owner.\n     */\n    static exitForManagementFees = (): string =>\n        defaultAbiCoder.encode(\n            ['uint256'],\n            [WeightedPoolExitKind.MANAGEMENT_FEE_TOKENS_OUT]\n        );\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n    // When the number is exactly equal to the max, normalizing with common inputs\n    // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n    if (weights.length == MaxWeightedTokens) {\n        return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n    }\n\n    const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n    if (sum.eq(ONE)) return weights;\n\n    const normalizedWeights = [];\n    let normalizedSum = Zero;\n    for (let index = 0; index < weights.length; index++) {\n        if (index < weights.length - 1) {\n            normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n            normalizedSum = normalizedSum.add(normalizedWeights[index]);\n        } else {\n            normalizedWeights[index] = ONE.sub(normalizedSum);\n        }\n    }\n\n    return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n    const totalWeight = weights.reduce(\n        (total: BigNumber, weight) => total.add(weight),\n        Zero\n    );\n    return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? prefix + \": \" + provided : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n    poolId: string\n): {\n    address: string;\n    specialization: PoolSpecialization;\n    nonce: BigNumber;\n} => {\n    return {\n        address: getPoolAddress(poolId),\n        specialization: getPoolSpecialization(poolId),\n        nonce: getPoolNonce(poolId),\n    };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n    invariant(poolId.length === 66, 'Invalid poolId length');\n    return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n    invariant(poolId.length === 66, 'Invalid poolId length');\n\n    // Only have 3 pool specializations so we can just pull the relevant character\n    const specializationCode = parseInt(poolId[45]);\n    invariant(specializationCode < 3, 'Invalid pool specialization');\n\n    return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n    invariant(poolId.length === 66, 'Invalid poolId length');\n    return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","const balancerErrorCodes: Record<string, string> = {\n    '000': 'ADD_OVERFLOW',\n    '001': 'SUB_OVERFLOW',\n    '002': 'SUB_UNDERFLOW',\n    '003': 'MUL_OVERFLOW',\n    '004': 'ZERO_DIVISION',\n    '005': 'DIV_INTERNAL',\n    '006': 'X_OUT_OF_BOUNDS',\n    '007': 'Y_OUT_OF_BOUNDS',\n    '008': 'PRODUCT_OUT_OF_BOUNDS',\n    '009': 'INVALID_EXPONENT',\n    '100': 'OUT_OF_BOUNDS',\n    '101': 'UNSORTED_ARRAY',\n    '102': 'UNSORTED_TOKENS',\n    '103': 'INPUT_LENGTH_MISMATCH',\n    '104': 'ZERO_TOKEN',\n    '200': 'MIN_TOKENS',\n    '201': 'MAX_TOKENS',\n    '202': 'MAX_SWAP_FEE_PERCENTAGE',\n    '203': 'MIN_SWAP_FEE_PERCENTAGE',\n    '204': 'MINIMUM_BPT',\n    '205': 'CALLER_NOT_VAULT',\n    '206': 'UNINITIALIZED',\n    '207': 'BPT_IN_MAX_AMOUNT',\n    '208': 'BPT_OUT_MIN_AMOUNT',\n    '209': 'EXPIRED_PERMIT',\n    '210': 'NOT_TWO_TOKENS',\n    '300': 'MIN_AMP',\n    '301': 'MAX_AMP',\n    '302': 'MIN_WEIGHT',\n    '303': 'MAX_STABLE_TOKENS',\n    '304': 'MAX_IN_RATIO',\n    '305': 'MAX_OUT_RATIO',\n    '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n    '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n    '308': 'NORMALIZED_WEIGHT_INVARIANT',\n    '309': 'INVALID_TOKEN',\n    '310': 'UNHANDLED_JOIN_KIND',\n    '311': 'ZERO_INVARIANT',\n    '312': 'ORACLE_INVALID_SECONDS_QUERY',\n    '313': 'ORACLE_NOT_INITIALIZED',\n    '314': 'ORACLE_QUERY_TOO_OLD',\n    '315': 'ORACLE_INVALID_INDEX',\n    '316': 'ORACLE_BAD_SECS',\n    '317': 'AMP_END_TIME_TOO_CLOSE',\n    '318': 'AMP_ONGOING_UPDATE',\n    '319': 'AMP_RATE_TOO_HIGH',\n    '320': 'AMP_NO_ONGOING_UPDATE',\n    '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n    '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n    '323': 'RELAYER_NOT_CONTRACT',\n    '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n    '325': 'REBALANCING_RELAYER_REENTERED',\n    '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n    '327': 'SWAPS_DISABLED',\n    '328': 'CALLER_IS_NOT_LBP_OWNER',\n    '329': 'PRICE_RATE_OVERFLOW',\n    '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n    '331': 'WEIGHT_CHANGE_TOO_FAST',\n    '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n    '333': 'UPPER_TARGET_TOO_HIGH',\n    '334': 'UNHANDLED_BY_LINEAR_POOL',\n    '335': 'OUT_OF_TARGET_RANGE',\n    '336': 'UNHANDLED_EXIT_KIND ',\n    '337': 'UNAUTHORIZED_EXIT',\n    '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n    '339': 'UNHANDLED_BY_MANAGED_POOL',\n    '340': 'UNHANDLED_BY_PHANTOM_POOL',\n    '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n    '342': 'INVALID_INITIALIZATION',\n    '400': 'REENTRANCY',\n    '401': 'SENDER_NOT_ALLOWED',\n    '402': 'PAUSED',\n    '403': 'PAUSE_WINDOW_EXPIRED',\n    '404': 'MAX_PAUSE_WINDOW_DURATION',\n    '405': 'MAX_BUFFER_PERIOD_DURATION',\n    '406': 'INSUFFICIENT_BALANCE',\n    '407': 'INSUFFICIENT_ALLOWANCE',\n    '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n    '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n    '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n    '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n    '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n    '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n    '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n    '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n    '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n    '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n    '418': 'SAFE_ERC20_CALL_FAILED',\n    '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n    '420': 'ADDRESS_CANNOT_SEND_VALUE',\n    '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n    '422': 'GRANT_SENDER_NOT_ADMIN',\n    '423': 'REVOKE_SENDER_NOT_ADMIN',\n    '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n    '425': 'BUFFER_PERIOD_EXPIRED',\n    '426': 'CALLER_IS_NOT_OWNER',\n    '427': 'NEW_OWNER_IS_ZERO',\n    '428': 'CODE_DEPLOYMENT_FAILED',\n    '429': 'CALL_TO_NON_CONTRACT',\n    '430': 'LOW_LEVEL_CALL_FAILED',\n    '431': 'NOT_PAUSED',\n    '500': 'INVALID_POOL_ID',\n    '501': 'CALLER_NOT_POOL',\n    '502': 'SENDER_NOT_ASSET_MANAGER',\n    '503': 'USER_DOESNT_ALLOW_RELAYER',\n    '504': 'INVALID_SIGNATURE',\n    '505': 'EXIT_BELOW_MIN',\n    '506': 'JOIN_ABOVE_MAX',\n    '507': 'SWAP_LIMIT',\n    '508': 'SWAP_DEADLINE',\n    '509': 'CANNOT_SWAP_SAME_TOKEN',\n    '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n    '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n    '512': 'INTERNAL_BALANCE_OVERFLOW',\n    '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n    '514': 'INVALID_ETH_INTERNAL_BALANCE',\n    '515': 'INVALID_POST_LOAN_BALANCE',\n    '516': 'INSUFFICIENT_ETH',\n    '517': 'UNALLOCATED_ETH',\n    '518': 'ETH_TRANSFER',\n    '519': 'CANNOT_USE_ETH_SENTINEL',\n    '520': 'TOKENS_MISMATCH',\n    '521': 'TOKEN_NOT_REGISTERED',\n    '522': 'TOKEN_ALREADY_REGISTERED',\n    '523': 'TOKENS_ALREADY_SET',\n    '524': 'TOKENS_LENGTH_MUST_BE_2',\n    '525': 'NONZERO_TOKEN_BALANCE',\n    '526': 'BALANCE_TOTAL_OVERFLOW',\n    '527': 'POOL_NO_TOKENS',\n    '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n    '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n    '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n    '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n};\n\nexport class BalancerErrors {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    static isErrorCode = (error: string): boolean => {\n        if (!error.includes('BAL#')) return false;\n\n        const errorCode = error.replace('BAL#', '');\n        return Object.keys(balancerErrorCodes).includes(errorCode);\n    };\n\n    /**\n     * Decodes a Balancer error code into the corresponding reason\n     * @param error - a Balancer error code of the form `BAL#000`\n     * @returns The decoded error reason\n     */\n    static parseErrorCode = (error: string): string => {\n        if (!error.includes('BAL#')) throw new Error('Error code not found');\n        const errorCode = error.replace('BAL#', '');\n\n        const actualError = balancerErrorCodes[errorCode];\n\n        if (!actualError) throw new Error('Error code not found');\n\n        return actualError;\n    };\n\n    /**\n     * Decodes a Balancer error code into the corresponding reason\n     * @param error - a Balancer error code of the form `BAL#000`\n     * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n     */\n    static tryParseErrorCode = (error: string): string => {\n        try {\n            return BalancerErrors.parseErrorCode(error);\n        } catch {\n            return error;\n        }\n    };\n\n    /**\n     * Tests whether a string is a known Balancer error message\n     * @param error - a string to be checked verified as a Balancer error message\n     */\n    static isBalancerError = (error: string): boolean =>\n        Object.values(balancerErrorCodes).includes(error);\n\n    /**\n     * Encodes an error string into the corresponding error code\n     * @param error - a Balancer error message string\n     * @returns a Balancer error code of the form `BAL#000`\n     */\n    static encodeError = (error: string): string => {\n        const encodedError = Object.entries(balancerErrorCodes).find(\n            ([, message]) => message === error\n        );\n\n        if (!encodedError) throw Error('Error message not found');\n\n        return `BAL#${encodedError[0]}`;\n    };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n    if (typeof account == 'string') return account;\n    if (Signer.isSigner(account)) return account.getAddress();\n    if (account.address) return account.address;\n    throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n    JoinPool = 'JoinPool',\n    ExitPool = 'ExitPool',\n    Swap = 'Swap',\n    BatchSwap = 'BatchSwap',\n    SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    static encodeCalldataAuthorization = (\n        calldata: string,\n        deadline: BigNumberish,\n        signature: string\n    ): string => {\n        const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n        const { v, r, s } = splitSignature(signature);\n        const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n        const encodedR = r.slice(2);\n        const encodedS = s.slice(2);\n        return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n    };\n\n    static signJoinAuthorization = (\n        validator: Contract,\n        user: Signer & TypedDataSigner,\n        allowedSender: Account,\n        allowedCalldata: string,\n        deadline?: BigNumberish,\n        nonce?: BigNumberish\n    ): Promise<string> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.JoinPool,\n            validator,\n            user,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce\n        );\n\n    static signExitAuthorization = (\n        validator: Contract,\n        user: Signer & TypedDataSigner,\n        allowedSender: Account,\n        allowedCalldata: string,\n        deadline?: BigNumberish,\n        nonce?: BigNumberish\n    ): Promise<string> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.ExitPool,\n            validator,\n            user,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce\n        );\n\n    static signSwapAuthorization = (\n        validator: Contract,\n        user: Signer & TypedDataSigner,\n        allowedSender: Account,\n        allowedCalldata: string,\n        deadline?: BigNumberish,\n        nonce?: BigNumberish\n    ): Promise<string> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.Swap,\n            validator,\n            user,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce\n        );\n\n    static signBatchSwapAuthorization = (\n        validator: Contract,\n        user: Signer & TypedDataSigner,\n        allowedSender: Account,\n        allowedCalldata: string,\n        deadline?: BigNumberish,\n        nonce?: BigNumberish\n    ): Promise<string> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.BatchSwap,\n            validator,\n            user,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce\n        );\n\n    static signSetRelayerApprovalAuthorization = (\n        validator: Contract,\n        user: Signer & TypedDataSigner,\n        allowedSender: Account,\n        allowedCalldata: string,\n        deadline?: BigNumberish,\n        nonce?: BigNumberish\n    ): Promise<string> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.SetRelayerApproval,\n            validator,\n            user,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce\n        );\n\n    static signAuthorizationFor = async (\n        type: RelayerAction,\n        validator: Contract,\n        user: Signer & TypedDataSigner,\n        allowedSender: Account,\n        allowedCalldata: string,\n        deadline: BigNumberish = MAX_DEADLINE,\n        nonce?: BigNumberish\n    ): Promise<string> => {\n        const { chainId } = await validator.provider.getNetwork();\n        if (!nonce) {\n            const userAddress = await user.getAddress();\n            nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n        }\n\n        const domain = {\n            name: 'Balancer V2 Vault',\n            version: '1',\n            chainId,\n            verifyingContract: validator.address,\n        };\n\n        const types = {\n            [type]: [\n                { name: 'calldata', type: 'bytes' },\n                { name: 'sender', type: 'address' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint256' },\n            ],\n        };\n\n        const value = {\n            calldata: allowedCalldata,\n            sender: await accountToAddress(allowedSender),\n            nonce: nonce.toString(),\n            deadline: deadline.toString(),\n        };\n\n        return user._signTypedData(domain, types, value);\n    };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n    token: Contract,\n    owner: Signer & TypedDataSigner,\n    spender: Account,\n    amount: BigNumberish,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n): Promise<{\n    v: number;\n    r: string;\n    s: string;\n    deadline: BigNumber;\n    nonce: BigNumber;\n}> => {\n    const { chainId } = await token.provider.getNetwork();\n    const ownerAddress = await owner.getAddress();\n\n    if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n    const domain = {\n        name: await token.name(),\n        version: '1',\n        chainId,\n        verifyingContract: token.address,\n    };\n\n    const types = {\n        Permit: [\n            { name: 'owner', type: 'address' },\n            { name: 'spender', type: 'address' },\n            { name: 'value', type: 'uint256' },\n            { name: 'nonce', type: 'uint256' },\n            { name: 'deadline', type: 'uint256' },\n        ],\n    };\n\n    const value = {\n        owner: ownerAddress,\n        spender: await accountToAddress(spender),\n        value: amount,\n        nonce,\n        deadline,\n    };\n\n    const signature = await owner._signTypedData(domain, types, value);\n    return {\n        ...splitSignature(signature),\n        deadline: BigNumber.from(deadline),\n        nonce: BigNumber.from(nonce),\n    };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number =>\n    tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1;\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n    matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n    public readonly ETH: string = AddressZero;\n    public readonly WETH: string;\n\n    constructor(wethAddress: string) {\n        this.WETH = getAddress(wethAddress);\n    }\n\n    static isEqual = (addressA: string, addressB: string): boolean =>\n        getAddress(addressA) === getAddress(addressB);\n\n    /**\n     * Tests whether `token` is ETH (represented by `0x0000...0000`).\n     *\n     * @param token - the address of the asset to be checked\n     */\n    isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n    /**\n     * Tests whether `token` is WETH.\n     *\n     * @param token - the address of the asset to be checked\n     */\n    isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n    /**\n     * Converts an asset to the equivalent ERC20 address.\n     *\n     * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n     * @param token - the address of the asset to be translated to an equivalent ERC20\n     * @returns the address of translated ERC20 asset\n     */\n    translateToERC20 = (token: string): string =>\n        this.isETH(token) ? this.WETH : token;\n\n    /**\n     * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n     *\n     * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n     *\n     * The zero address (representing ETH) is sorted as if it were the WETH address.\n     * This matches the behaviour expected by the Vault when receiving an array of addresses.\n     *\n     * @param tokens - an array of token addresses to be sorted in ascending order\n     * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n     * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n     *\n     * @example\n     * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n     * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n     * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n     */\n    sortTokens(\n        tokens: string[],\n        ...others: unknown[][]\n    ): [string[], ...unknown[][]] {\n        others.forEach((array) =>\n            invariant(tokens.length === array.length, 'array length mismatch')\n        );\n\n        // We want to sort ETH as if were WETH so we translate to ERC20s\n        const erc20Tokens = tokens.map(this.translateToERC20);\n\n        const transpose = transposeMatrix([erc20Tokens, ...others]) as [\n            string,\n            ...unknown[]\n        ][];\n        const sortedTranspose = transpose.sort(([tokenA], [tokenB]) =>\n            cmpTokens(tokenA, tokenB)\n        );\n        const [sortedErc20s, ...sortedOthers] = transposeMatrix(\n            sortedTranspose\n        ) as [string[], ...unknown[][]];\n\n        // If one of the tokens was ETH, we need to translate back from WETH\n        const sortedTokens = tokens.includes(this.ETH)\n            ? sortedErc20s.map((token) =>\n                  this.isWETH(token) ? this.ETH : token\n              )\n            : sortedErc20s;\n        return [sortedTokens, ...sortedOthers];\n    }\n}\n","import { JsonRpcProvider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\n\nimport aTokenRateProviderAbi from '../abi/StaticATokenRateProvider.json';\n\nexport class AaveHelpers {\n    static async getRate(\n        rateProviderAddress: string,\n        provider: JsonRpcProvider\n    ): Promise<string> {\n        const rateProviderContract = new Contract(\n            rateProviderAddress,\n            aTokenRateProviderAbi,\n            provider\n        );\n\n        const rate = await rateProviderContract.getRate();\n        return rate.toString();\n    }\n}\n","import { getAddress } from '@ethersproject/address';\n\nexport * from './errors';\nexport * from './permit';\nexport * from './signatures';\nexport * from './assetHelpers';\nexport * from './aaveHelpers';\n\nexport const isSameAddress = (address1: string, address2: string): boolean =>\n    getAddress(address1) === getAddress(address2);\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { Network } from './lib/constants/network';\nimport { Contract } from '@ethersproject/contracts';\nimport { PoolDataService, TokenPriceService } from '@balancer-labs/sor';\n\nexport interface BalancerSdkConfig {\n    //use a known network or provide an entirely custom config\n    network: Network | BalancerNetworkConfig;\n    rpcUrl: string;\n    //overwrite the subgraph url if you don't want to use the balancer labs maintained version\n    customSubgraphUrl?: string;\n    //optionally overwrite parts of the standard SOR config\n    sor?: Partial<BalancerSdkSorConfig>;\n}\n\nexport interface BalancerSdkSorConfig {\n    //use a built-in service or provide a custom implementation of a TokenPriceService\n    //defaults to coingecko\n    tokenPriceService: 'coingecko' | 'subgraph' | TokenPriceService;\n    //use a built-in service or provide a custom implementation of a PoolDataService\n    //defaults to subgraph\n    poolDataService: 'subgraph' | PoolDataService;\n    //if a custom PoolDataService is provided, on chain balance fetching needs to be handled externally\n    //default to true.\n    fetchOnChainBalances: boolean;\n}\n\nexport type BalancerLinearPoolType = 'aave' | 'yearn' | 'boo';\n\nexport interface BalancerNetworkConfig {\n    chainId: Network;\n    addresses: {\n        contracts: {\n            vault: string;\n            multicall: string;\n            batchRelayer?: string;\n        };\n        tokens: {\n            wrappedNativeAsset: string;\n        };\n        linearFactories?: {\n            [address: string]: BalancerLinearPoolType;\n        };\n    };\n    urls: {\n        subgraph: string;\n    };\n    pools: {\n        staBal3Pool?: PoolReference;\n        wethStaBal3?: PoolReference;\n    };\n    fBeets?: {\n        address: string;\n        farmId: number;\n        poolId: string;\n    };\n}\n\nexport type PoolReference = {\n    id: string;\n    address: string;\n};\n\nexport enum PoolSpecialization {\n    GeneralPool = 0,\n    MinimalSwapInfoPool,\n    TwoTokenPool,\n}\n\n// Joins\n\nexport type JoinPoolRequest = {\n    assets: string[];\n    maxAmountsIn: BigNumberish[];\n    userData: string;\n    fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n    assets: string[];\n    minAmountsOut: string[];\n    userData: string;\n    toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n    DepositInternal = 0,\n    WithdrawInternal,\n    TransferInternal,\n    TransferExternal,\n}\n\nexport type UserBalanceOp = {\n    kind: UserBalanceOpKind;\n    asset: string;\n    amount: BigNumberish;\n    sender: string;\n    recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n    Withdraw = 0,\n    Deposit = 1,\n    Update = 2,\n}\n\nexport type PoolBalanceOp = {\n    kind: PoolBalanceOpKind;\n    poolId: string;\n    token: string;\n    amount: BigNumberish;\n};\n\nexport interface TransactionData {\n    contract?: Contract;\n    function: string;\n    params: string[];\n    outputs?: {\n        amountsIn?: string[];\n        amountsOut?: string[];\n    };\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum SwapType {\n    SwapExactIn,\n    SwapExactOut,\n}\n\nexport type FundManagement = {\n    sender: string;\n    recipient: string;\n    fromInternalBalance: boolean;\n    toInternalBalance: boolean;\n};\n\nexport type SingleSwap = {\n    poolId: string;\n    kind: SwapType;\n    assetIn: string;\n    assetOut: string;\n    amount: BigNumberish;\n    userData: string;\n};\n\nexport type Swap = {\n    kind: SwapType;\n    singleSwap: SingleSwap;\n    limit: BigNumberish;\n    deadline: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n    poolId: string;\n    assetInIndex: number;\n    assetOutIndex: number;\n    amount: string;\n    userData: string;\n};\n\nexport type BatchSwap = {\n    kind: SwapType;\n    swaps: BatchSwapStep[];\n    assets: string[];\n    funds: FundManagement;\n    limits: BigNumberish[];\n    deadline: BigNumberish;\n};\n\nexport interface FetchPoolsInput {\n    fetchPools: boolean;\n    fetchOnChain: boolean;\n}\n\nexport interface QueryWithSorInput {\n    tokensIn: string[];\n    tokensOut: string[];\n    swapType: SwapType;\n    amounts: string[];\n    fetchPools: FetchPoolsInput;\n}\n\nexport interface QueryWithSorOutput {\n    returnAmounts: string[];\n    swaps: BatchSwapStep[];\n    assets: string[];\n    deltas: string[];\n}\n","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\n\nimport { SwapType } from './types';\nimport { isSameAddress } from '@/lib/utils';\n\n/**\n * Helper to create limits using a defined slippage amount.\n * @param tokensIn - Array of token in addresses.\n * @param tokensOut - Array of token out addresses.\n * @param swapType - Type of swap - SwapExactIn or SwapExactOut\n * @param deltas - An array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array.\n * @param assets - array contains the addresses of all assets involved in the swaps.\n * @param slippage - Slippage to be applied. i.e. 5%=50000000000000000.\n * @returns Returns an array (same length as assets) with limits applied for each asset.\n */\nexport function getLimitsForSlippage(\n    tokensIn: string[],\n    tokensOut: string[],\n    swapType: SwapType,\n    deltas: BigNumberish[],\n    assets: string[],\n    slippage: BigNumberish\n): BigNumberish[] {\n    // Limits:\n    // +ve means max to send\n    // -ve mean min to receive\n    // For a multihop the intermediate tokens should be 0\n    const limits: BigNumber[] = new Array(assets.length).fill(Zero);\n\n    assets.forEach((token, i) => {\n        if (tokensIn.some((tokenIn) => isSameAddress(token, tokenIn))) {\n            // For SwapExactOut slippage is on tokenIn, i.e. amtIn + slippage\n            const slippageAmount = BigNumber.from(slippage).add(WeiPerEther);\n            limits[i] =\n                swapType === SwapType.SwapExactOut\n                    ? limits[i].add(\n                          BigNumber.from(deltas[i])\n                              .mul(slippageAmount)\n                              .div(WeiPerEther)\n                      )\n                    : limits[i].add(deltas[i]);\n        }\n\n        if (tokensOut.some((tokenOut) => isSameAddress(token, tokenOut))) {\n            // For SwapExactIn slippage is on tokenOut, i.e. amtOut - slippage\n            const slippageAmount = WeiPerEther.sub(BigNumber.from(slippage));\n            limits[i] =\n                swapType === SwapType.SwapExactIn\n                    ? limits[i].add(\n                          BigNumber.from(deltas[i])\n                              .mul(slippageAmount)\n                              .div(WeiPerEther)\n                      )\n                    : limits[i].add(deltas[i]);\n        }\n    });\n\n    return limits;\n}\n","export enum Network {\n    MAINNET = 1,\n    ROPSTEN = 3,\n    RINKEBY = 4,\n    GÖRLI = 5,\n    KOVAN = 42,\n    POLYGON = 137,\n    ARBITRUM = 42161,\n    AVALANCHE = 43114,\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { AddressZero, Zero } from '@ethersproject/constants';\nimport { SOR, SwapTypes, SwapInfo } from '@balancer-labs/sor';\nimport {\n    SwapType,\n    BatchSwapStep,\n    FundManagement,\n    QueryWithSorInput,\n    QueryWithSorOutput,\n} from './types';\n\n/*\n * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n *\n * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n * receives are the same that an equivalent `batchSwap` call would receive.\n */\nexport async function queryBatchSwap(\n    vaultContract: Contract,\n    swapType: SwapType,\n    swaps: BatchSwapStep[],\n    assets: string[]\n): Promise<string[]> {\n    const funds: FundManagement = {\n        sender: AddressZero,\n        recipient: AddressZero,\n        fromInternalBalance: false,\n        toInternalBalance: false,\n    };\n\n    try {\n        const deltas = await vaultContract.queryBatchSwap(\n            swapType,\n            swaps,\n            assets,\n            funds\n        );\n        return deltas.map((d: BigNumberish) => d.toString());\n    } catch (err) {\n        throw `queryBatchSwap call error: ${err}`;\n    }\n}\n\n/*\nUses SOR to create a batchSwap which is then queried onChain.\n*/\nexport async function queryBatchSwapWithSor(\n    sor: SOR,\n    vaultContract: Contract,\n    queryWithSor: QueryWithSorInput\n): Promise<QueryWithSorOutput> {\n    if (queryWithSor.fetchPools.fetchPools) await sor.fetchPools();\n\n    const swaps: BatchSwapStep[][] = [];\n    const assetArray: string[][] = [];\n    // get path information for each tokenIn\n    for (let i = 0; i < queryWithSor.tokensIn.length; i++) {\n        const swap = await getSorSwapInfo(\n            queryWithSor.tokensIn[i],\n            queryWithSor.tokensOut[i],\n            queryWithSor.swapType,\n            queryWithSor.amounts[i].toString(),\n            sor\n        );\n        swaps.push(swap.swaps);\n        assetArray.push(swap.tokenAddresses);\n    }\n\n    // Join swaps and assets together correctly\n    const batchedSwaps = batchSwaps(assetArray, swaps);\n\n    const returnTokens =\n        queryWithSor.swapType === SwapType.SwapExactIn\n            ? queryWithSor.tokensOut\n            : queryWithSor.tokensIn;\n    const returnAmounts: string[] = Array(returnTokens.length).fill(Zero);\n    let deltas: BigNumberish[] = Array(batchedSwaps.assets.length).fill(Zero);\n    try {\n        // Onchain query\n        deltas = await queryBatchSwap(\n            vaultContract,\n            queryWithSor.swapType,\n            batchedSwaps.swaps,\n            batchedSwaps.assets\n        );\n\n        if (deltas.length > 0) {\n            returnTokens.forEach((t, i) => {\n                const idx = batchedSwaps.assets.indexOf(t.toLowerCase());\n\n                returnAmounts[i] =\n                    idx !== -1 ? deltas[idx].toString() : Zero.toString();\n            });\n        }\n    } catch (err) {\n        console.error(`queryBatchSwapTokensIn error: ${err}`);\n    }\n\n    return {\n        returnAmounts,\n        swaps: batchedSwaps.swaps,\n        assets: batchedSwaps.assets,\n        deltas: deltas.map((d) => d.toString()),\n    };\n}\n\n/*\nUse SOR to get swapInfo for tokenIn>tokenOut.\nSwapInfos.swaps has path information.\n*/\nasync function getSorSwapInfo(\n    tokenIn: string,\n    tokenOut: string,\n    swapType: SwapType,\n    amount: string,\n    sor: SOR\n): Promise<SwapInfo> {\n    const swapTypeSOR: SwapTypes =\n        swapType === SwapType.SwapExactIn\n            ? SwapTypes.SwapExactIn\n            : SwapTypes.SwapExactOut;\n    const swapInfo = await sor.getSwaps(\n        tokenIn.toLowerCase(),\n        tokenOut.toLowerCase(),\n        swapTypeSOR,\n        amount\n    );\n    return swapInfo;\n}\n\n/*\nFormat multiple individual swaps/assets into a single swap/asset.\n*/\nfunction batchSwaps(\n    assetArray: string[][],\n    swaps: BatchSwapStep[][]\n): { swaps: BatchSwapStep[]; assets: string[] } {\n    // asset addresses without duplicates\n    const newAssetArray = [...new Set(assetArray.flat())];\n\n    // Update indices of each swap to use new asset array\n    swaps.forEach((swap, i) => {\n        swap.forEach((poolSwap) => {\n            poolSwap.assetInIndex = newAssetArray.indexOf(\n                assetArray[i][poolSwap.assetInIndex]\n            );\n            poolSwap.assetOutIndex = newAssetArray.indexOf(\n                assetArray[i][poolSwap.assetOutIndex]\n            );\n        });\n    });\n\n    // Join Swaps into a single batchSwap\n    const batchedSwaps = swaps.flat();\n    return { swaps: batchedSwaps, assets: newAssetArray };\n}\n","import { Network } from './network';\nimport { BalancerNetworkConfig } from '@/types';\n\nexport const balancerVault = '0xb8f34fa65bef9c361eb52d95a930fa3548b3fba3';\n\nexport const BALANCER_NETWORK_CONFIG: Record<Network, BalancerNetworkConfig> = {\n    [Network.MAINNET]: {\n        chainId: Network.MAINNET, //1\n        addresses: {\n            contracts: {\n                vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n                multicall: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n            },\n            linearFactories: {\n                '0xd7fad3bd59d6477cbe1be7f646f7f1ba25b230f8': 'aave',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2',\n        },\n        pools: {\n            staBal3Pool: {\n                id: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n                address: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb2',\n            },\n        },\n    },\n\n    [Network.AVALANCHE]: {\n        chainId: Network.AVALANCHE, //1\n        addresses: {\n            contracts: {\n                vault: '0xb8f34FA65beF9c361eb52d95a930fa3548B3FbA3',\n                multicall: '0x5f031af1264ebcdf5abee25c39793ff992fc2629',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/dev-soul/testson',\n        },\n        pools: {},\n\n    },\n\n    [Network.POLYGON]: {\n        chainId: Network.POLYGON, //137\n        addresses: {\n            contracts: {\n                vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n                multicall: '0xa1B2b503959aedD81512C37e9dce48164ec6a94d',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-polygon-v2',\n        },\n        pools: {},\n    },\n    [Network.ARBITRUM]: {\n        chainId: Network.ARBITRUM, //42161\n        addresses: {\n            contracts: {\n                vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n                multicall: '0x269ff446d9892c9e19082564df3f5e8741e190a1',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-arbitrum-v2',\n        },\n        pools: {},\n    },\n    [Network.KOVAN]: {\n        chainId: Network.KOVAN, //42\n        addresses: {\n            contracts: {\n                vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n                multicall: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-kovan-v2',\n        },\n        pools: {\n            staBal3Pool: {\n                id: '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8',\n                address: '0x8fd162f338b770f7e879030830cde9173367f301',\n            },\n            wethStaBal3: {\n                id: '0x6be79a54f119dbf9e8ebd9ded8c5bd49205bc62d00020000000000000000033c',\n                address: '0x6be79a54f119dbf9e8ebd9ded8c5bd49205bc62d',\n            },\n        },\n    },\n    [Network.ROPSTEN]: {\n        chainId: Network.ROPSTEN, //3\n        addresses: {\n            contracts: {\n                vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n                multicall: '0x53c43764255c17bd724f74c4ef150724ac50a3ed',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n            },\n        },\n        urls: {\n            subgraph: '',\n        },\n        pools: {},\n    },\n    [Network.RINKEBY]: {\n        chainId: Network.RINKEBY, //4\n        addresses: {\n            contracts: {\n                vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n                multicall: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-rinkeby-v2',\n        },\n        pools: {},\n    },\n    [Network.GÖRLI]: {\n        chainId: Network.GÖRLI, //5\n        addresses: {\n            contracts: {\n                vault: '0x65748E8287Ce4B9E6D83EE853431958851550311',\n                multicall: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\n            },\n            tokens: {\n                wrappedNativeAsset:\n                    '0x9A1000D492d40bfccbc03f413A48F5B6516Ec0Fd',\n            },\n        },\n        urls: {\n            subgraph:\n                'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2',\n        },\n        pools: {},\n    },\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: string;\n  BigInt: string;\n  Bytes: string;\n};\n\nexport type AmpUpdate = {\n  __typename?: 'AmpUpdate';\n  endAmp: Scalars['BigInt'];\n  endTimestamp: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startAmp: Scalars['BigInt'];\n  startTimestamp: Scalars['BigInt'];\n};\n\nexport type AmpUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endAmp?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startAmp?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum AmpUpdate_OrderBy {\n  EndAmp = 'endAmp',\n  EndTimestamp = 'endTimestamp',\n  Id = 'id',\n  PoolId = 'poolId',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartAmp = 'startAmp',\n  StartTimestamp = 'startTimestamp'\n}\n\nexport type Balancer = {\n  __typename?: 'Balancer';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  pools?: Maybe<Array<Pool>>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\n\nexport type BalancerPoolsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Pool_Filter>;\n};\n\nexport type BalancerSnapshot = {\n  __typename?: 'BalancerSnapshot';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  timestamp: Scalars['Int'];\n  totalLiquidity: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  vault: Balancer;\n};\n\nexport type BalancerSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vault?: InputMaybe<Scalars['String']>;\n  vault_contains?: InputMaybe<Scalars['String']>;\n  vault_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_ends_with?: InputMaybe<Scalars['String']>;\n  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_gt?: InputMaybe<Scalars['String']>;\n  vault_gte?: InputMaybe<Scalars['String']>;\n  vault_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_lt?: InputMaybe<Scalars['String']>;\n  vault_lte?: InputMaybe<Scalars['String']>;\n  vault_not?: InputMaybe<Scalars['String']>;\n  vault_not_contains?: InputMaybe<Scalars['String']>;\n  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_not_starts_with?: InputMaybe<Scalars['String']>;\n  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_starts_with?: InputMaybe<Scalars['String']>;\n  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum BalancerSnapshot_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Timestamp = 'timestamp',\n  TotalLiquidity = 'totalLiquidity',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  Vault = 'vault'\n}\n\nexport type Balancer_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Balancer_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Pools = 'pools',\n  TotalLiquidity = 'totalLiquidity',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type BlockChangedFilter = {\n  number_gte: Scalars['Int'];\n};\n\nexport type Block_Height = {\n  hash?: InputMaybe<Scalars['Bytes']>;\n  number?: InputMaybe<Scalars['Int']>;\n  number_gte?: InputMaybe<Scalars['Int']>;\n};\n\nexport type GradualWeightUpdate = {\n  __typename?: 'GradualWeightUpdate';\n  endTimestamp: Scalars['BigInt'];\n  endWeights: Array<Scalars['BigInt']>;\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startTimestamp: Scalars['BigInt'];\n  startWeights: Array<Scalars['BigInt']>;\n};\n\nexport type GradualWeightUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GradualWeightUpdate_OrderBy {\n  EndTimestamp = 'endTimestamp',\n  EndWeights = 'endWeights',\n  Id = 'id',\n  PoolId = 'poolId',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartTimestamp = 'startTimestamp',\n  StartWeights = 'startWeights'\n}\n\nexport enum InvestType {\n  Exit = 'Exit',\n  Join = 'Join'\n}\n\nexport type Investment = {\n  __typename?: 'Investment';\n  amount: Scalars['BigDecimal'];\n  assetManagerAddress: Scalars['Bytes'];\n  id: Scalars['ID'];\n  poolTokenId: PoolToken;\n  timestamp: Scalars['Int'];\n};\n\nexport type Investment_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amount?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amount_lt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_lte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  assetManagerAddress?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  assetManagerAddress_not?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_not_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolTokenId?: InputMaybe<Scalars['String']>;\n  poolTokenId_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_gt?: InputMaybe<Scalars['String']>;\n  poolTokenId_gte?: InputMaybe<Scalars['String']>;\n  poolTokenId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_lt?: InputMaybe<Scalars['String']>;\n  poolTokenId_lte?: InputMaybe<Scalars['String']>;\n  poolTokenId_not?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum Investment_OrderBy {\n  Amount = 'amount',\n  AssetManagerAddress = 'assetManagerAddress',\n  Id = 'id',\n  PoolTokenId = 'poolTokenId',\n  Timestamp = 'timestamp'\n}\n\nexport type JoinExit = {\n  __typename?: 'JoinExit';\n  amounts: Array<Scalars['BigDecimal']>;\n  id: Scalars['ID'];\n  pool: Pool;\n  sender: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n  tx: Scalars['Bytes'];\n  type: InvestType;\n  user: User;\n};\n\nexport type JoinExit_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  sender?: InputMaybe<Scalars['Bytes']>;\n  sender_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  sender_not?: InputMaybe<Scalars['Bytes']>;\n  sender_not_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  type?: InputMaybe<InvestType>;\n  type_in?: InputMaybe<Array<InvestType>>;\n  type_not?: InputMaybe<InvestType>;\n  type_not_in?: InputMaybe<Array<InvestType>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum JoinExit_OrderBy {\n  Amounts = 'amounts',\n  Id = 'id',\n  Pool = 'pool',\n  Sender = 'sender',\n  Timestamp = 'timestamp',\n  Tx = 'tx',\n  Type = 'type',\n  User = 'user'\n}\n\nexport type LatestPrice = {\n  __typename?: 'LatestPrice';\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type LatestPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum LatestPrice_OrderBy {\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  Price = 'price',\n  PricingAsset = 'pricingAsset'\n}\n\n/** Defines the order direction, either ascending or descending */\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  address: Scalars['Bytes'];\n  amp?: Maybe<Scalars['BigInt']>;\n  baseToken?: Maybe<Scalars['Bytes']>;\n  createTime: Scalars['Int'];\n  expiryTime?: Maybe<Scalars['BigInt']>;\n  factory?: Maybe<Scalars['Bytes']>;\n  historicalValues?: Maybe<Array<PoolHistoricalLiquidity>>;\n  holdersCount: Scalars['BigInt'];\n  id: Scalars['ID'];\n  lowerTarget?: Maybe<Scalars['BigDecimal']>;\n  mainIndex?: Maybe<Scalars['Int']>;\n  managementFee?: Maybe<Scalars['BigDecimal']>;\n  name?: Maybe<Scalars['String']>;\n  owner?: Maybe<Scalars['Bytes']>;\n  poolType?: Maybe<Scalars['String']>;\n  priceRateProviders?: Maybe<Array<PriceRateProvider>>;\n  principalToken?: Maybe<Scalars['Bytes']>;\n  shares?: Maybe<Array<PoolShare>>;\n  strategyType: Scalars['Int'];\n  swapEnabled: Scalars['Boolean'];\n  swapFee: Scalars['BigDecimal'];\n  swaps?: Maybe<Array<Swap>>;\n  swapsCount: Scalars['BigInt'];\n  symbol?: Maybe<Scalars['String']>;\n  tokens?: Maybe<Array<PoolToken>>;\n  tokensList: Array<Scalars['Bytes']>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalShares: Scalars['BigDecimal'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  totalWeight?: Maybe<Scalars['BigDecimal']>;\n  tx?: Maybe<Scalars['Bytes']>;\n  unitSeconds?: Maybe<Scalars['BigInt']>;\n  upperTarget?: Maybe<Scalars['BigDecimal']>;\n  vaultID: Balancer;\n  weightUpdates?: Maybe<Array<GradualWeightUpdate>>;\n  wrappedIndex?: Maybe<Scalars['Int']>;\n};\n\n\nexport type PoolHistoricalValuesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type PoolPriceRateProvidersArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type PoolSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type PoolSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type PoolTokensArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type PoolWeightUpdatesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\nexport type PoolHistoricalLiquidity = {\n  __typename?: 'PoolHistoricalLiquidity';\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  poolLiquidity: Scalars['BigDecimal'];\n  poolShareValue: Scalars['BigDecimal'];\n  poolTotalShares: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type PoolHistoricalLiquidity_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum PoolHistoricalLiquidity_OrderBy {\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolLiquidity = 'poolLiquidity',\n  PoolShareValue = 'poolShareValue',\n  PoolTotalShares = 'poolTotalShares',\n  PricingAsset = 'pricingAsset'\n}\n\nexport type PoolShare = {\n  __typename?: 'PoolShare';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  userAddress: User;\n};\n\nexport type PoolShare_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PoolShare_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  PoolId = 'poolId',\n  UserAddress = 'userAddress'\n}\n\nexport type PoolSnapshot = {\n  __typename?: 'PoolSnapshot';\n  amounts: Array<Scalars['BigDecimal']>;\n  id: Scalars['ID'];\n  liquidity: Scalars['BigDecimal'];\n  pool: Pool;\n  swapFees: Scalars['BigDecimal'];\n  swapVolume: Scalars['BigDecimal'];\n  timestamp: Scalars['Int'];\n  totalShares: Scalars['BigDecimal'];\n};\n\nexport type PoolSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  liquidity?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  swapFees?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFees_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolSnapshot_OrderBy {\n  Amounts = 'amounts',\n  Id = 'id',\n  Liquidity = 'liquidity',\n  Pool = 'pool',\n  SwapFees = 'swapFees',\n  SwapVolume = 'swapVolume',\n  Timestamp = 'timestamp',\n  TotalShares = 'totalShares'\n}\n\nexport type PoolToken = {\n  __typename?: 'PoolToken';\n  address: Scalars['String'];\n  balance: Scalars['BigDecimal'];\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  invested: Scalars['BigDecimal'];\n  investments?: Maybe<Array<Investment>>;\n  name: Scalars['String'];\n  poolId: Pool;\n  priceRate: Scalars['BigDecimal'];\n  symbol: Scalars['String'];\n  token: Token;\n  weight?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type PoolTokenInvestmentsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Investment_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Investment_Filter>;\n};\n\nexport type PoolToken_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  invested?: InputMaybe<Scalars['BigDecimal']>;\n  invested_gt?: InputMaybe<Scalars['BigDecimal']>;\n  invested_gte?: InputMaybe<Scalars['BigDecimal']>;\n  invested_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  invested_lt?: InputMaybe<Scalars['BigDecimal']>;\n  invested_lte?: InputMaybe<Scalars['BigDecimal']>;\n  invested_not?: InputMaybe<Scalars['BigDecimal']>;\n  invested_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  priceRate?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  priceRate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  weight?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolToken_OrderBy {\n  Address = 'address',\n  Balance = 'balance',\n  Decimals = 'decimals',\n  Id = 'id',\n  Invested = 'invested',\n  Investments = 'investments',\n  Name = 'name',\n  PoolId = 'poolId',\n  PriceRate = 'priceRate',\n  Symbol = 'symbol',\n  Token = 'token',\n  Weight = 'weight'\n}\n\nexport type Pool_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  amp?: InputMaybe<Scalars['BigInt']>;\n  amp_gt?: InputMaybe<Scalars['BigInt']>;\n  amp_gte?: InputMaybe<Scalars['BigInt']>;\n  amp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  amp_lt?: InputMaybe<Scalars['BigInt']>;\n  amp_lte?: InputMaybe<Scalars['BigInt']>;\n  amp_not?: InputMaybe<Scalars['BigInt']>;\n  amp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  baseToken?: InputMaybe<Scalars['Bytes']>;\n  baseToken_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  baseToken_not?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  createTime?: InputMaybe<Scalars['Int']>;\n  createTime_gt?: InputMaybe<Scalars['Int']>;\n  createTime_gte?: InputMaybe<Scalars['Int']>;\n  createTime_in?: InputMaybe<Array<Scalars['Int']>>;\n  createTime_lt?: InputMaybe<Scalars['Int']>;\n  createTime_lte?: InputMaybe<Scalars['Int']>;\n  createTime_not?: InputMaybe<Scalars['Int']>;\n  createTime_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  expiryTime?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  expiryTime_lt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_lte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  factory?: InputMaybe<Scalars['Bytes']>;\n  factory_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  factory_not?: InputMaybe<Scalars['Bytes']>;\n  factory_not_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  holdersCount?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  holdersCount_lt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_lte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lowerTarget?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lowerTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  mainIndex?: InputMaybe<Scalars['Int']>;\n  mainIndex_gt?: InputMaybe<Scalars['Int']>;\n  mainIndex_gte?: InputMaybe<Scalars['Int']>;\n  mainIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  mainIndex_lt?: InputMaybe<Scalars['Int']>;\n  mainIndex_lte?: InputMaybe<Scalars['Int']>;\n  mainIndex_not?: InputMaybe<Scalars['Int']>;\n  mainIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  managementFee?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managementFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  owner?: InputMaybe<Scalars['Bytes']>;\n  owner_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  owner_not?: InputMaybe<Scalars['Bytes']>;\n  owner_not_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolType?: InputMaybe<Scalars['String']>;\n  poolType_contains?: InputMaybe<Scalars['String']>;\n  poolType_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_gt?: InputMaybe<Scalars['String']>;\n  poolType_gte?: InputMaybe<Scalars['String']>;\n  poolType_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_lt?: InputMaybe<Scalars['String']>;\n  poolType_lte?: InputMaybe<Scalars['String']>;\n  poolType_not?: InputMaybe<Scalars['String']>;\n  poolType_not_contains?: InputMaybe<Scalars['String']>;\n  poolType_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  principalToken?: InputMaybe<Scalars['Bytes']>;\n  principalToken_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  principalToken_not?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  strategyType?: InputMaybe<Scalars['Int']>;\n  strategyType_gt?: InputMaybe<Scalars['Int']>;\n  strategyType_gte?: InputMaybe<Scalars['Int']>;\n  strategyType_in?: InputMaybe<Array<Scalars['Int']>>;\n  strategyType_lt?: InputMaybe<Scalars['Int']>;\n  strategyType_lte?: InputMaybe<Scalars['Int']>;\n  strategyType_not?: InputMaybe<Scalars['Int']>;\n  strategyType_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  swapEnabled?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapFee?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapsCount?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swapsCount_lt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_lte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokensList?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  unitSeconds?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  unitSeconds_lt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_lte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  upperTarget?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  upperTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vaultID?: InputMaybe<Scalars['String']>;\n  vaultID_contains?: InputMaybe<Scalars['String']>;\n  vaultID_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_gt?: InputMaybe<Scalars['String']>;\n  vaultID_gte?: InputMaybe<Scalars['String']>;\n  vaultID_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_lt?: InputMaybe<Scalars['String']>;\n  vaultID_lte?: InputMaybe<Scalars['String']>;\n  vaultID_not?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_not_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  wrappedIndex?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  wrappedIndex_lt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_lte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum Pool_OrderBy {\n  Address = 'address',\n  Amp = 'amp',\n  BaseToken = 'baseToken',\n  CreateTime = 'createTime',\n  ExpiryTime = 'expiryTime',\n  Factory = 'factory',\n  HistoricalValues = 'historicalValues',\n  HoldersCount = 'holdersCount',\n  Id = 'id',\n  LowerTarget = 'lowerTarget',\n  MainIndex = 'mainIndex',\n  ManagementFee = 'managementFee',\n  Name = 'name',\n  Owner = 'owner',\n  PoolType = 'poolType',\n  PriceRateProviders = 'priceRateProviders',\n  PrincipalToken = 'principalToken',\n  Shares = 'shares',\n  StrategyType = 'strategyType',\n  SwapEnabled = 'swapEnabled',\n  SwapFee = 'swapFee',\n  Swaps = 'swaps',\n  SwapsCount = 'swapsCount',\n  Symbol = 'symbol',\n  Tokens = 'tokens',\n  TokensList = 'tokensList',\n  TotalLiquidity = 'totalLiquidity',\n  TotalShares = 'totalShares',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  TotalWeight = 'totalWeight',\n  Tx = 'tx',\n  UnitSeconds = 'unitSeconds',\n  UpperTarget = 'upperTarget',\n  VaultId = 'vaultID',\n  WeightUpdates = 'weightUpdates',\n  WrappedIndex = 'wrappedIndex'\n}\n\nexport type PriceRateProvider = {\n  __typename?: 'PriceRateProvider';\n  address: Scalars['Bytes'];\n  cacheDuration: Scalars['Int'];\n  cacheExpiry: Scalars['Int'];\n  id: Scalars['ID'];\n  lastCached: Scalars['Int'];\n  poolId: Pool;\n  rate: Scalars['BigDecimal'];\n  token: PoolToken;\n};\n\nexport type PriceRateProvider_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  cacheDuration?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheDuration_lt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_lte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry_lt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_lte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lastCached?: InputMaybe<Scalars['Int']>;\n  lastCached_gt?: InputMaybe<Scalars['Int']>;\n  lastCached_gte?: InputMaybe<Scalars['Int']>;\n  lastCached_in?: InputMaybe<Array<Scalars['Int']>>;\n  lastCached_lt?: InputMaybe<Scalars['Int']>;\n  lastCached_lte?: InputMaybe<Scalars['Int']>;\n  lastCached_not?: InputMaybe<Scalars['Int']>;\n  lastCached_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rate?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PriceRateProvider_OrderBy {\n  Address = 'address',\n  CacheDuration = 'cacheDuration',\n  CacheExpiry = 'cacheExpiry',\n  Id = 'id',\n  LastCached = 'lastCached',\n  PoolId = 'poolId',\n  Rate = 'rate',\n  Token = 'token'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  investment?: Maybe<Investment>;\n  investments: Array<Investment>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  pool?: Maybe<Pool>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  swap?: Maybe<Swap>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type QueryAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type QueryBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type QueryBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type QueryGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type QueryInvestmentArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryInvestmentsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Investment_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Investment_Filter>;\n};\n\n\nexport type QueryJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type QueryLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type QueryPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type QueryPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type QueryPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type QueryPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type QueryPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type QueryPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type QuerySwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type QueryTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type QueryTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type QueryTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type QueryTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type QueryTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type QueryUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type QueryUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  investment?: Maybe<Investment>;\n  investments: Array<Investment>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  pool?: Maybe<Pool>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  swap?: Maybe<Swap>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type SubscriptionAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type SubscriptionBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type SubscriptionBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type SubscriptionGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type SubscriptionInvestmentArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionInvestmentsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Investment_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Investment_Filter>;\n};\n\n\nexport type SubscriptionJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type SubscriptionLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type SubscriptionPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type SubscriptionPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type SubscriptionPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type SubscriptionSwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type SubscriptionTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type SubscriptionTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type SubscriptionTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type SubscriptionUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type SubscriptionUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Swap = {\n  __typename?: 'Swap';\n  caller: Scalars['Bytes'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  timestamp: Scalars['Int'];\n  tokenAmountIn: Scalars['BigDecimal'];\n  tokenAmountOut: Scalars['BigDecimal'];\n  tokenIn: Scalars['Bytes'];\n  tokenInSym: Scalars['String'];\n  tokenOut: Scalars['Bytes'];\n  tokenOutSym: Scalars['String'];\n  tx: Scalars['Bytes'];\n  userAddress: User;\n};\n\nexport type Swap_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  caller?: InputMaybe<Scalars['Bytes']>;\n  caller_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  caller_not?: InputMaybe<Scalars['Bytes']>;\n  caller_not_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tokenAmountIn?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountIn_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenIn?: InputMaybe<Scalars['Bytes']>;\n  tokenInSym?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_gt?: InputMaybe<Scalars['String']>;\n  tokenInSym_gte?: InputMaybe<Scalars['String']>;\n  tokenInSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_lt?: InputMaybe<Scalars['String']>;\n  tokenInSym_lte?: InputMaybe<Scalars['String']>;\n  tokenInSym_not?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenIn_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenIn_not?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut?: InputMaybe<Scalars['Bytes']>;\n  tokenOutSym?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_lt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_lte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOut_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut_not?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum Swap_OrderBy {\n  Caller = 'caller',\n  Id = 'id',\n  PoolId = 'poolId',\n  Timestamp = 'timestamp',\n  TokenAmountIn = 'tokenAmountIn',\n  TokenAmountOut = 'tokenAmountOut',\n  TokenIn = 'tokenIn',\n  TokenInSym = 'tokenInSym',\n  TokenOut = 'tokenOut',\n  TokenOutSym = 'tokenOutSym',\n  Tx = 'tx',\n  UserAddress = 'userAddress'\n}\n\nexport type Token = {\n  __typename?: 'Token';\n  address: Scalars['String'];\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  latestPrice?: Maybe<LatestPrice>;\n  name?: Maybe<Scalars['String']>;\n  symbol?: Maybe<Scalars['String']>;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenPrice = {\n  __typename?: 'TokenPrice';\n  amount: Scalars['BigDecimal'];\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n};\n\nexport type TokenPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amount?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amount_lt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_lte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum TokenPrice_OrderBy {\n  Amount = 'amount',\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  Price = 'price',\n  PricingAsset = 'pricingAsset',\n  Timestamp = 'timestamp'\n}\n\nexport type TokenSnapshot = {\n  __typename?: 'TokenSnapshot';\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  token: Token;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TokenSnapshot_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Token = 'token',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type Token_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  latestPrice?: InputMaybe<Scalars['String']>;\n  latestPrice_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_gt?: InputMaybe<Scalars['String']>;\n  latestPrice_gte?: InputMaybe<Scalars['String']>;\n  latestPrice_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_lt?: InputMaybe<Scalars['String']>;\n  latestPrice_lte?: InputMaybe<Scalars['String']>;\n  latestPrice_not?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_not_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Token_OrderBy {\n  Address = 'address',\n  Decimals = 'decimals',\n  Id = 'id',\n  LatestPrice = 'latestPrice',\n  Name = 'name',\n  Symbol = 'symbol',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type TradePair = {\n  __typename?: 'TradePair';\n  /** Token Address - Token Address */\n  id: Scalars['ID'];\n  token0: Token;\n  token1: Token;\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot = {\n  __typename?: 'TradePairSnapshot';\n  id: Scalars['ID'];\n  pair: TradePair;\n  timestamp: Scalars['Int'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pair?: InputMaybe<Scalars['String']>;\n  pair_contains?: InputMaybe<Scalars['String']>;\n  pair_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_ends_with?: InputMaybe<Scalars['String']>;\n  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_gt?: InputMaybe<Scalars['String']>;\n  pair_gte?: InputMaybe<Scalars['String']>;\n  pair_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_lt?: InputMaybe<Scalars['String']>;\n  pair_lte?: InputMaybe<Scalars['String']>;\n  pair_not?: InputMaybe<Scalars['String']>;\n  pair_not_contains?: InputMaybe<Scalars['String']>;\n  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_not_starts_with?: InputMaybe<Scalars['String']>;\n  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_starts_with?: InputMaybe<Scalars['String']>;\n  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePairSnapshot_OrderBy {\n  Id = 'id',\n  Pair = 'pair',\n  Timestamp = 'timestamp',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type TradePair_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  token0?: InputMaybe<Scalars['String']>;\n  token0_contains?: InputMaybe<Scalars['String']>;\n  token0_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_ends_with?: InputMaybe<Scalars['String']>;\n  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_gt?: InputMaybe<Scalars['String']>;\n  token0_gte?: InputMaybe<Scalars['String']>;\n  token0_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_lt?: InputMaybe<Scalars['String']>;\n  token0_lte?: InputMaybe<Scalars['String']>;\n  token0_not?: InputMaybe<Scalars['String']>;\n  token0_not_contains?: InputMaybe<Scalars['String']>;\n  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_not_starts_with?: InputMaybe<Scalars['String']>;\n  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_starts_with?: InputMaybe<Scalars['String']>;\n  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1?: InputMaybe<Scalars['String']>;\n  token1_contains?: InputMaybe<Scalars['String']>;\n  token1_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_ends_with?: InputMaybe<Scalars['String']>;\n  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_gt?: InputMaybe<Scalars['String']>;\n  token1_gte?: InputMaybe<Scalars['String']>;\n  token1_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_lt?: InputMaybe<Scalars['String']>;\n  token1_lte?: InputMaybe<Scalars['String']>;\n  token1_not?: InputMaybe<Scalars['String']>;\n  token1_not_contains?: InputMaybe<Scalars['String']>;\n  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_not_starts_with?: InputMaybe<Scalars['String']>;\n  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_starts_with?: InputMaybe<Scalars['String']>;\n  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePair_OrderBy {\n  Id = 'id',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  sharesOwned?: Maybe<Array<PoolShare>>;\n  swaps?: Maybe<Array<Swap>>;\n  userInternalBalances?: Maybe<Array<UserInternalBalance>>;\n};\n\n\nexport type UserSharesOwnedArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type UserSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type UserUserInternalBalancesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\nexport type UserInternalBalance = {\n  __typename?: 'UserInternalBalance';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  token: Scalars['Bytes'];\n  userAddress?: Maybe<User>;\n};\n\nexport type UserInternalBalance_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  token?: InputMaybe<Scalars['Bytes']>;\n  token_contains?: InputMaybe<Scalars['Bytes']>;\n  token_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  token_not?: InputMaybe<Scalars['Bytes']>;\n  token_not_contains?: InputMaybe<Scalars['Bytes']>;\n  token_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum UserInternalBalance_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  Token = 'token',\n  UserAddress = 'userAddress'\n}\n\nexport type User_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n};\n\nexport enum User_OrderBy {\n  Id = 'id',\n  SharesOwned = 'sharesOwned',\n  Swaps = 'swaps',\n  UserInternalBalances = 'userInternalBalances'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   *\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type PoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, factory?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string }> | null }> };\n\nexport type PoolQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolQuery = { __typename?: 'Query', pool?: { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, factory?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string }> | null } | null };\n\nexport type PoolsWithoutLinearQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsWithoutLinearQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string }> | null }> };\n\nexport type PoolWithoutLinearQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolWithoutLinearQuery = { __typename?: 'Query', pool?: { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string }> | null } | null };\n\nexport type SubgraphPoolFragment = { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, factory?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string }> | null };\n\nexport type SubgraphPoolWithoutLinearFragment = { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string }> | null };\n\nexport type SubgraphPoolTokenFragment = { __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, invested: string, weight?: string | null, priceRate: string };\n\nexport type PoolHistoricalLiquiditiesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolHistoricalLiquiditiesQuery = { __typename?: 'Query', poolHistoricalLiquidities: Array<{ __typename?: 'PoolHistoricalLiquidity', id: string, poolTotalShares: string, poolLiquidity: string, poolShareValue: string, pricingAsset: string, block: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type PoolSnapshotsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolSnapshotsQuery = { __typename?: 'Query', poolSnapshots: Array<{ __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphPoolSnapshotFragment = { __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } };\n\nexport type JoinExitsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<JoinExit_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type JoinExitsQuery = { __typename?: 'Query', joinExits: Array<{ __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } }> };\n\nexport type SubgraphJoinExitFragment = { __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } };\n\nexport type BalancersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Balancer_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type BalancersQuery = { __typename?: 'Query', balancers: Array<{ __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number }> };\n\nexport type SubgraphBalancerFragment = { __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number };\n\nexport type TokenPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<TokenPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenPricesQuery = { __typename?: 'Query', tokenPrices: Array<{ __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphTokenPriceFragment = { __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } };\n\nexport type TokenLatestPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<LatestPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenLatestPricesQuery = { __typename?: 'Query', latestPrices: Array<{ __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type TokenLatestPriceQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type TokenLatestPriceQuery = { __typename?: 'Query', latestPrice?: { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } } | null };\n\nexport type SubgraphTokenLatestPriceFragment = { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } };\n\nexport type UserQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null } | null };\n\nexport type UsersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<User_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null }> };\n\nexport type SubgraphUserFragment = { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null };\n\nexport const SubgraphPoolTokenFragmentDoc = gql`\n    fragment SubgraphPoolToken on PoolToken {\n  id\n  symbol\n  name\n  decimals\n  address\n  balance\n  invested\n  weight\n  priceRate\n}\n    `;\nexport const SubgraphPoolFragmentDoc = gql`\n    fragment SubgraphPool on Pool {\n  id\n  address\n  poolType\n  symbol\n  name\n  swapFee\n  totalWeight\n  totalSwapVolume\n  totalSwapFee\n  totalLiquidity\n  totalShares\n  tokens(first: 100) {\n    ...SubgraphPoolToken\n  }\n  swapsCount\n  holdersCount\n  tokensList\n  totalWeight\n  amp\n  expiryTime\n  unitSeconds\n  principalToken\n  baseToken\n  swapEnabled\n  wrappedIndex\n  mainIndex\n  lowerTarget\n  upperTarget\n  factory\n}\n    ${SubgraphPoolTokenFragmentDoc}`;\nexport const SubgraphPoolWithoutLinearFragmentDoc = gql`\n    fragment SubgraphPoolWithoutLinear on Pool {\n  id\n  address\n  poolType\n  symbol\n  name\n  swapFee\n  totalWeight\n  totalSwapVolume\n  totalSwapFee\n  totalLiquidity\n  totalShares\n  tokens(first: 1000) {\n    ...SubgraphPoolToken\n  }\n  swapsCount\n  holdersCount\n  tokensList\n  totalWeight\n  amp\n  expiryTime\n  unitSeconds\n  principalToken\n  baseToken\n  swapEnabled\n}\n    ${SubgraphPoolTokenFragmentDoc}`;\nexport const SubgraphPoolSnapshotFragmentDoc = gql`\n    fragment SubgraphPoolSnapshot on PoolSnapshot {\n  id\n  pool {\n    id\n  }\n  totalShares\n  swapVolume\n  swapFees\n  timestamp\n}\n    `;\nexport const SubgraphJoinExitFragmentDoc = gql`\n    fragment SubgraphJoinExit on JoinExit {\n  amounts\n  id\n  sender\n  timestamp\n  tx\n  type\n  user {\n    id\n  }\n  pool {\n    id\n    tokensList\n  }\n}\n    `;\nexport const SubgraphBalancerFragmentDoc = gql`\n    fragment SubgraphBalancer on Balancer {\n  id\n  totalLiquidity\n  totalSwapVolume\n  totalSwapFee\n  totalSwapCount\n  poolCount\n}\n    `;\nexport const SubgraphTokenPriceFragmentDoc = gql`\n    fragment SubgraphTokenPrice on TokenPrice {\n  id\n  poolId {\n    id\n  }\n  asset\n  amount\n  pricingAsset\n  price\n  block\n  timestamp\n}\n    `;\nexport const SubgraphTokenLatestPriceFragmentDoc = gql`\n    fragment SubgraphTokenLatestPrice on LatestPrice {\n  id\n  asset\n  price\n  poolId {\n    id\n  }\n  pricingAsset\n}\n    `;\nexport const SubgraphUserFragmentDoc = gql`\n    fragment SubgraphUser on User {\n  id\n  sharesOwned(first: 1000) {\n    balance\n    poolId {\n      id\n    }\n  }\n}\n    `;\nexport const PoolsDocument = gql`\n    query Pools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolDocument = gql`\n    query Pool($id: ID!, $block: Block_height) {\n  pool(id: $id, block: $block) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolsWithoutLinearDocument = gql`\n    query PoolsWithoutLinear($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolWithoutLinear\n  }\n}\n    ${SubgraphPoolWithoutLinearFragmentDoc}`;\nexport const PoolWithoutLinearDocument = gql`\n    query PoolWithoutLinear($id: ID!, $block: Block_height) {\n  pool(id: $id, block: $block) {\n    ...SubgraphPoolWithoutLinear\n  }\n}\n    ${SubgraphPoolWithoutLinearFragmentDoc}`;\nexport const PoolHistoricalLiquiditiesDocument = gql`\n    query PoolHistoricalLiquidities($skip: Int, $first: Int, $orderBy: PoolHistoricalLiquidity_orderBy, $orderDirection: OrderDirection, $where: PoolHistoricalLiquidity_filter, $block: Block_height) {\n  poolHistoricalLiquidities(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    id\n    poolId {\n      id\n    }\n    poolTotalShares\n    poolLiquidity\n    poolShareValue\n    pricingAsset\n    block\n  }\n}\n    `;\nexport const PoolSnapshotsDocument = gql`\n    query PoolSnapshots($skip: Int, $first: Int, $orderBy: PoolSnapshot_orderBy, $orderDirection: OrderDirection, $where: PoolSnapshot_filter, $block: Block_height) {\n  poolSnapshots(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolSnapshot\n  }\n}\n    ${SubgraphPoolSnapshotFragmentDoc}`;\nexport const JoinExitsDocument = gql`\n    query JoinExits($skip: Int, $first: Int, $orderBy: JoinExit_orderBy, $orderDirection: OrderDirection, $where: JoinExit_filter, $block: Block_height) {\n  joinExits(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphJoinExit\n  }\n}\n    ${SubgraphJoinExitFragmentDoc}`;\nexport const BalancersDocument = gql`\n    query Balancers($skip: Int, $first: Int, $orderBy: Balancer_orderBy, $orderDirection: OrderDirection, $where: Balancer_filter, $block: Block_height) {\n  balancers(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphBalancer\n  }\n}\n    ${SubgraphBalancerFragmentDoc}`;\nexport const TokenPricesDocument = gql`\n    query TokenPrices($skip: Int, $first: Int, $orderBy: TokenPrice_orderBy, $orderDirection: OrderDirection, $where: TokenPrice_filter, $block: Block_height) {\n  tokenPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenPrice\n  }\n}\n    ${SubgraphTokenPriceFragmentDoc}`;\nexport const TokenLatestPricesDocument = gql`\n    query TokenLatestPrices($skip: Int, $first: Int, $orderBy: LatestPrice_orderBy, $orderDirection: OrderDirection, $where: LatestPrice_filter, $block: Block_height) {\n  latestPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const TokenLatestPriceDocument = gql`\n    query TokenLatestPrice($id: ID!) {\n  latestPrice(id: $id) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const UserDocument = gql`\n    query User($id: ID!, $block: Block_height) {\n  user(id: $id, block: $block) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\nexport const UsersDocument = gql`\n    query Users($skip: Int, $first: Int, $orderBy: User_orderBy, $orderDirection: OrderDirection, $where: User_filter, $block: Block_height) {\n  users(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    Pools(variables?: PoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsQuery>(PoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pools');\n    },\n    Pool(variables: PoolQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolQuery>(PoolDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pool');\n    },\n    PoolsWithoutLinear(variables?: PoolsWithoutLinearQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsWithoutLinearQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsWithoutLinearQuery>(PoolsWithoutLinearDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolsWithoutLinear');\n    },\n    PoolWithoutLinear(variables: PoolWithoutLinearQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolWithoutLinearQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolWithoutLinearQuery>(PoolWithoutLinearDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolWithoutLinear');\n    },\n    PoolHistoricalLiquidities(variables?: PoolHistoricalLiquiditiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolHistoricalLiquiditiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolHistoricalLiquiditiesQuery>(PoolHistoricalLiquiditiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolHistoricalLiquidities');\n    },\n    PoolSnapshots(variables?: PoolSnapshotsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolSnapshotsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolSnapshotsQuery>(PoolSnapshotsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolSnapshots');\n    },\n    JoinExits(variables?: JoinExitsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<JoinExitsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<JoinExitsQuery>(JoinExitsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'JoinExits');\n    },\n    Balancers(variables?: BalancersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<BalancersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<BalancersQuery>(BalancersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Balancers');\n    },\n    TokenPrices(variables?: TokenPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenPricesQuery>(TokenPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenPrices');\n    },\n    TokenLatestPrices(variables?: TokenLatestPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPricesQuery>(TokenLatestPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrices');\n    },\n    TokenLatestPrice(variables: TokenLatestPriceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPriceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPriceQuery>(TokenLatestPriceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrice');\n    },\n    User(variables: UserQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UserQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UserQuery>(UserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'User');\n    },\n    Users(variables?: UsersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UsersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UsersQuery>(UsersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Users');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport { getSdk, Sdk } from './generated/balancer-subgraph-types';\n\nexport * from './generated/balancer-subgraph-types';\n\nexport type SubgraphClient = Sdk;\n\nexport function createSubgraphClient(subgraphUrl: string): SubgraphClient {\n    const client = new GraphQLClient(subgraphUrl);\n\n    return getSdk(client);\n}\n","import { set } from 'lodash';\nimport { Fragment, JsonFragment, Interface, Result } from '@ethersproject/abi';\nimport { CallOverrides, Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { BytesLike } from '@ethersproject/bytes';\n\nexport class Multicaller {\n    private multiAddress: string;\n    private provider: Provider;\n    private interface: Interface;\n    public options: CallOverrides = {};\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private calls: [string, string, any][] = [];\n    private paths: string[] = [];\n\n    constructor(\n        multiAddress: string,\n        provider: Provider,\n        abi: string | Array<Fragment | JsonFragment | string>,\n        options = {}\n    ) {\n        this.multiAddress = multiAddress;\n        this.provider = provider;\n        this.interface = new Interface(abi);\n        this.options = options;\n    }\n\n    call(\n        path: string,\n        address: string,\n        functionName: string,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        params?: any[]\n    ): Multicaller {\n        this.calls.push([address, functionName, params]);\n        this.paths.push(path);\n        return this;\n    }\n\n    async execute(\n        from: Record<string, unknown> = {}\n    ): Promise<Record<string, unknown>> {\n        const obj = from;\n        const results = await this.executeMulticall();\n        results.forEach((result, i) =>\n            set(obj, this.paths[i], result.length > 1 ? result : result[0])\n        );\n        this.calls = [];\n        this.paths = [];\n        return obj;\n    }\n\n    private async executeMulticall(): Promise<Result[]> {\n        const multi = new Contract(\n            this.multiAddress,\n            [\n                'function aggregate(tuple[](address target, bytes callData) memory calls) public view returns (uint256 blockNumber, bytes[] memory returnData)',\n            ],\n            this.provider\n        );\n\n        const [, res] = await multi.aggregate(\n            this.calls.map(([address, functionName, params]) => [\n                address,\n                this.interface.encodeFunctionData(functionName, params),\n            ]),\n            this.options\n        );\n\n        return res.map((result: BytesLike, i: number) =>\n            this.interface.decodeFunctionResult(this.calls[i][1], result)\n        );\n    }\n}\n","import { formatFixed } from '@ethersproject/bignumber';\nimport { Provider } from '@ethersproject/providers';\nimport { PoolFilter, SubgraphPoolBase } from '@balancer-labs/sor';\nimport { Multicaller } from '@/lib/utils/multiCaller';\nimport { isSameAddress } from '@/lib/utils';\n\n// TODO: decide whether we want to trim these ABIs down to the relevant functions\nimport vaultAbi from '@/lib/abi/Vault.json';\nimport aTokenRateProvider from '@/lib/abi/StaticATokenRateProvider.json';\nimport weightedPoolAbi from '@/lib/abi/WeightedPool.json';\nimport stablePoolAbi from '@/lib/abi/StablePool.json';\nimport elementPoolAbi from '@/lib/abi/ConvergentCurvePool.json';\nimport linearPoolAbi from '@/lib/abi/LinearPool.json';\n\nexport async function getOnChainBalances(\n    subgraphPoolsOriginal: SubgraphPoolBase[],\n    multiAddress: string,\n    vaultAddress: string,\n    provider: Provider\n): Promise<SubgraphPoolBase[]> {\n    if (subgraphPoolsOriginal.length === 0) return subgraphPoolsOriginal;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const abis: any = Object.values(\n        // Remove duplicate entries using their names\n        Object.fromEntries(\n            [\n                ...vaultAbi,\n                ...aTokenRateProvider,\n                ...weightedPoolAbi,\n                ...stablePoolAbi,\n                ...elementPoolAbi,\n                ...linearPoolAbi,\n            ].map((row) => [row.name, row])\n        )\n    );\n\n    const multiPool = new Multicaller(multiAddress, provider, abis);\n\n    const supportedPoolTypes: string[] = Object.values(PoolFilter);\n    const subgraphPools: SubgraphPoolBase[] = [];\n    subgraphPoolsOriginal.forEach((pool) => {\n        if (!supportedPoolTypes.includes(pool.poolType)) {\n            console.error(`Unknown pool type: ${pool.poolType} ${pool.id}`);\n            return;\n        }\n\n        subgraphPools.push(pool);\n\n        multiPool.call(`${pool.id}.poolTokens`, vaultAddress, 'getPoolTokens', [\n            pool.id,\n        ]);\n        multiPool.call(`${pool.id}.totalSupply`, pool.address, 'totalSupply');\n\n        // TO DO - Make this part of class to make more flexible?\n        if (\n            pool.poolType === 'Weighted' ||\n            pool.poolType === 'LiquidityBootstrapping' ||\n            pool.poolType === 'Investment'\n        ) {\n            multiPool.call(\n                `${pool.id}.weights`,\n                pool.address,\n                'getNormalizedWeights'\n            );\n            multiPool.call(\n                `${pool.id}.swapFee`,\n                pool.address,\n                'getSwapFeePercentage'\n            );\n        } else if (\n            pool.poolType === 'Stable' ||\n            pool.poolType === 'MetaStable' ||\n            pool.poolType === 'StablePhantom'\n        ) {\n            // MetaStable & StablePhantom is the same as Stable for multicall purposes\n            multiPool.call(\n                `${pool.id}.amp`,\n                pool.address,\n                'getAmplificationParameter'\n            );\n            multiPool.call(\n                `${pool.id}.swapFee`,\n                pool.address,\n                'getSwapFeePercentage'\n            );\n        } else if (pool.poolType === 'Element') {\n            multiPool.call(`${pool.id}.swapFee`, pool.address, 'percentFee');\n        } else if (pool.poolType === 'AaveLinear') {\n            multiPool.call(\n                `${pool.id}.swapFee`,\n                pool.address,\n                'getSwapFeePercentage'\n            );\n\n            multiPool.call(`${pool.id}.targets`, pool.address, 'getTargets');\n            multiPool.call(\n                `${pool.id}.rate`,\n                pool.address,\n                'getWrappedTokenRate'\n            );\n        }\n    });\n\n    let pools = {} as Record<\n        string,\n        {\n            amp?: string[];\n            swapFee: string;\n            weights?: string[];\n            targets?: string[];\n            poolTokens: {\n                tokens: string[];\n                balances: string[];\n            };\n            rate?: string;\n        }\n    >;\n\n    try {\n        pools = (await multiPool.execute()) as Record<\n            string,\n            {\n                amp?: string[];\n                swapFee: string;\n                weights?: string[];\n                poolTokens: {\n                    tokens: string[];\n                    balances: string[];\n                };\n                rate?: string;\n            }\n        >;\n    } catch (err) {\n        throw `Issue with multicall execution.`;\n    }\n\n    const onChainPools: SubgraphPoolBase[] = [];\n\n    Object.entries(pools).forEach(([poolId, onchainData], index) => {\n        try {\n            const { poolTokens, swapFee, weights } = onchainData;\n\n            if (\n                subgraphPools[index].poolType === 'Stable' ||\n                subgraphPools[index].poolType === 'MetaStable' ||\n                subgraphPools[index].poolType === 'StablePhantom'\n            ) {\n                if (!onchainData.amp) {\n                    console.error(`Stable Pool Missing Amp: ${poolId}`);\n                    return;\n                } else {\n                    // Need to scale amp by precision to match expected Subgraph scale\n                    // amp is stored with 3 decimals of precision\n                    subgraphPools[index].amp = formatFixed(\n                        onchainData.amp[0],\n                        3\n                    );\n                }\n            }\n\n            if (subgraphPools[index].poolType === 'AaveLinear') {\n                if (!onchainData.targets) {\n                    console.error(`Linear Pool Missing Targets: ${poolId}`);\n                    return;\n                } else {\n                    subgraphPools[index].lowerTarget = formatFixed(\n                        onchainData.targets[0],\n                        18\n                    );\n                    subgraphPools[index].upperTarget = formatFixed(\n                        onchainData.targets[1],\n                        18\n                    );\n                }\n\n                const wrappedIndex = subgraphPools[index].wrappedIndex;\n                if (\n                    wrappedIndex === undefined ||\n                    onchainData.rate === undefined\n                ) {\n                    console.error(\n                        `Linear Pool Missing WrappedIndex or PriceRate: ${poolId}`\n                    );\n                    return;\n                }\n                // Update priceRate of wrappedToken\n                subgraphPools[index].tokens[wrappedIndex].priceRate =\n                    formatFixed(onchainData.rate, 18);\n            }\n\n            subgraphPools[index].swapFee = formatFixed(swapFee, 18);\n\n            poolTokens.tokens.forEach((token, i) => {\n                const T = subgraphPools[index].tokens.find((t) =>\n                    isSameAddress(t.address, token)\n                );\n                if (!T) throw `Pool Missing Expected Token: ${poolId} ${token}`;\n                T.balance = formatFixed(poolTokens.balances[i], T.decimals);\n                if (weights) {\n                    // Only expected for WeightedPools\n                    T.weight = formatFixed(weights[i], 18);\n                }\n            });\n            onChainPools.push(subgraphPools[index]);\n        } catch (err) {\n            throw `Issue with pool onchain data: ${err}`;\n        }\n    });\n\n    return onChainPools;\n}\n","import { PoolDataService, SubgraphPoolBase } from '@balancer-labs/sor';\nimport {\n    OrderDirection,\n    Pool_OrderBy,\n    SubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport { parseInt } from 'lodash';\nimport { getOnChainBalances } from './onChainData';\nimport { Provider } from '@ethersproject/providers';\nimport { Network } from '@/lib/constants/network';\nimport { BalancerNetworkConfig, BalancerSdkSorConfig } from '@/types';\n\nconst NETWORKS_WITH_LINEAR_POOLS = [\n    Network.MAINNET,\n    Network.ROPSTEN,\n    Network.RINKEBY,\n    Network.GÖRLI,\n    Network.KOVAN,\n    Network.AVALANCHE,\n];\n\nexport class SubgraphPoolDataService implements PoolDataService {\n    constructor(\n        private readonly client: SubgraphClient,\n        private readonly provider: Provider,\n        private readonly network: BalancerNetworkConfig,\n        private readonly sorConfig: BalancerSdkSorConfig\n    ) {}\n\n    public async getPools(): Promise<SubgraphPoolBase[]> {\n        const pools = this.supportsLinearPools\n            ? await this.getLinearPools()\n            : await this.getNonLinearPools();\n\n        const mapped = pools.map((pool) => ({\n            ...pool,\n            poolType: pool.poolType || '',\n            tokens: (pool.tokens || []).map((token) => ({\n                ...token,\n                weight: token.weight || null,\n            })),\n            totalWeight: pool.totalWeight || undefined,\n            amp: pool.amp || undefined,\n            expiryTime: pool.expiryTime ? parseInt(pool.expiryTime) : undefined,\n            unitSeconds: pool.unitSeconds\n                ? parseInt(pool.unitSeconds)\n                : undefined,\n            principalToken: pool.principalToken || undefined,\n            baseToken: pool.baseToken || undefined,\n        }));\n\n        if (this.sorConfig.fetchOnChainBalances === false) {\n            return mapped;\n        }\n\n        return getOnChainBalances(\n            mapped,\n            this.network.addresses.contracts.multicall,\n            this.network.addresses.contracts.vault,\n            this.provider\n        );\n    }\n\n    private get supportsLinearPools() {\n        return NETWORKS_WITH_LINEAR_POOLS.includes(this.network.chainId);\n    }\n\n    private async getLinearPools() {\n        const { pools } = await this.client.Pools({\n            where: { swapEnabled: true },\n            orderBy: Pool_OrderBy.TotalLiquidity,\n            orderDirection: OrderDirection.Desc,\n            first: 1000,\n        });\n\n        return pools;\n    }\n\n    private async getNonLinearPools() {\n        const { pools } = await this.client.PoolsWithoutLinear({\n            where: { swapEnabled: true },\n            orderBy: Pool_OrderBy.TotalLiquidity,\n            orderDirection: OrderDirection.Desc,\n            first: 1000,\n        });\n\n        return pools;\n    }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport axios from 'axios';\n\nexport class CoingeckoTokenPriceService implements TokenPriceService {\n    constructor(private readonly chainId: number) {}\n\n    public async getNativeAssetPriceInToken(\n        tokenAddress: string\n    ): Promise<string> {\n        const ethPerToken = await this.getTokenPriceInNativeAsset(tokenAddress);\n\n        // We get the price of token in terms of ETH\n        // We want the price of 1 ETH in terms of the token base units\n        return `${1 / parseFloat(ethPerToken)}`;\n    }\n\n    /**\n     * @dev Assumes that the native asset has 18 decimals\n     * @param tokenAddress - the address of the token contract\n     * @returns the price of 1 ETH in terms of the token base units\n     */\n    async getTokenPriceInNativeAsset(tokenAddress: string): Promise<string> {\n        const endpoint = `https://api.coingecko.com/api/v3/simple/token_price/${this.platformId}?contract_addresses=${tokenAddress}&vs_currencies=${this.nativeAssetId}`;\n\n        const { data } = await axios.get(endpoint, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (\n            data[tokenAddress.toLowerCase()][this.nativeAssetId] === undefined\n        ) {\n            throw Error('No price returned from Coingecko');\n        }\n\n        return data[tokenAddress.toLowerCase()][this.nativeAssetId];\n    }\n\n    private get platformId(): string {\n        switch (this.chainId) {\n            case 1:\n                return 'ethereum';\n            case 42:\n                return 'ethereum';\n            case 137:\n                return 'polygon-pos';\n            case 42161:\n                return 'arbitrum-one';\n        }\n\n        return '2';\n    }\n\n    private get nativeAssetId(): string {\n        switch (this.chainId) {\n            case 1:\n                return 'eth';\n            case 42:\n                return 'eth';\n            case 137:\n                return '';\n            case 42161:\n                return 'eth';\n        }\n\n        return '';\n    }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport { SubgraphClient } from '@/modules/subgraph/subgraph';\nimport { keyBy } from 'lodash';\n\nexport class SubgraphTokenPriceService implements TokenPriceService {\n    private readonly weth: string;\n\n    constructor(private readonly client: SubgraphClient, weth: string) {\n        //the subgraph addresses are all toLowerCase\n        this.weth = weth.toLowerCase();\n    }\n\n    public async getNativeAssetPriceInToken(\n        tokenAddress: string\n    ): Promise<string> {\n        const ethPerToken = await this.getLatestPriceInEthFromSubgraph(\n            tokenAddress\n        );\n\n        if (!ethPerToken) {\n            throw Error('No price found in the subgraph');\n        }\n\n        // We want the price of 1 ETH in terms of the token base units\n        return `${1 / ethPerToken}`;\n    }\n\n    public async getLatestPriceInEthFromSubgraph(\n        tokenAddress: string\n    ): Promise<number | null> {\n        tokenAddress = tokenAddress.toLowerCase();\n\n        const { latestPrices } = await this.client.TokenLatestPrices({\n            where: { asset_in: [tokenAddress, this.weth] },\n        });\n        const pricesKeyedOnId = keyBy(latestPrices, 'id');\n\n        //the ids are set as ${asset}-${pricingAsset}\n        //first try to find an exact match\n        if (pricesKeyedOnId[`${tokenAddress}-${this.weth}`]) {\n            return parseFloat(\n                pricesKeyedOnId[`${tokenAddress}-${this.weth}`].price\n            );\n        }\n\n        //no exact match, try to traverse the path\n        const matchingLatestPrices = latestPrices.filter(\n            (price) => price.asset === tokenAddress\n        );\n\n        //pick the first one we match on.\n        //There is no timestamp on latestPrice, should get introduced to allow for sorting by latest\n        for (const tokenPrice of matchingLatestPrices) {\n            const pricingAssetPricedInEth =\n                pricesKeyedOnId[`${tokenPrice.pricingAsset}-${this.weth}`];\n\n            //1 BAL = 20 USDC, 1 USDC = 0.00025 ETH, 1 BAL = 20 * 0.00025\n            if (pricingAssetPricedInEth) {\n                return (\n                    parseFloat(tokenPrice.price) *\n                    parseFloat(pricingAssetPricedInEth.price)\n                );\n            }\n        }\n\n        return null;\n    }\n}\n","import { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { BalancerNetworkConfig, BalancerSdkConfig } from '@/types';\n\nexport function getNetworkConfig(\n    config: BalancerSdkConfig\n): BalancerNetworkConfig {\n    if (typeof config.network === 'number') {\n        const networkConfig = BALANCER_NETWORK_CONFIG[config.network];\n\n        return {\n            ...networkConfig,\n            urls: {\n                ...networkConfig.urls,\n                subgraph:\n                    config.customSubgraphUrl ?? networkConfig.urls.subgraph,\n            },\n        };\n    }\n\n    return {\n        ...config.network,\n        urls: {\n            ...config.network.urls,\n            subgraph: config.customSubgraphUrl ?? config.network.urls.subgraph,\n        },\n    };\n}\n","import { SOR, SorConfig, TokenPriceService } from '@balancer-labs/sor';\nimport { Provider, JsonRpcProvider } from '@ethersproject/providers';\nimport { SubgraphPoolDataService } from './pool-data/subgraphPoolDataService';\nimport { CoingeckoTokenPriceService } from './token-price/coingeckoTokenPriceService';\nimport {\n    SubgraphClient,\n    createSubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport {\n    BalancerNetworkConfig,\n    BalancerSdkConfig,\n    BalancerSdkSorConfig,\n} from '@/types';\nimport { SubgraphTokenPriceService } from './token-price/subgraphTokenPriceService';\nimport { getNetworkConfig } from '@/modules/sdk.helpers';\n\nexport class Sor extends SOR {\n    constructor(sdkConfig: BalancerSdkConfig) {\n        const network = getNetworkConfig(sdkConfig);\n        const sorConfig = Sor.getSorConfig(sdkConfig);\n        const sorNetworkConfig = Sor.getSorNetworkConfig(network);\n        const provider = new JsonRpcProvider(sdkConfig.rpcUrl);\n        const subgraphClient = createSubgraphClient(network.urls.subgraph);\n\n        const poolDataService = Sor.getPoolDataService(\n            network,\n            sorConfig,\n            provider,\n            subgraphClient\n        );\n\n        const tokenPriceService = Sor.getTokenPriceService(\n            network,\n            sorConfig,\n            subgraphClient\n        );\n\n        super(provider, sorNetworkConfig, poolDataService, tokenPriceService);\n    }\n\n    private static getSorConfig(\n        config: BalancerSdkConfig\n    ): BalancerSdkSorConfig {\n        return {\n            tokenPriceService: 'coingecko',\n            poolDataService: 'subgraph',\n            fetchOnChainBalances: true,\n            ...config.sor,\n        };\n    }\n\n    private static getSorNetworkConfig(\n        network: BalancerNetworkConfig\n    ): SorConfig {\n        return {\n            ...network,\n            vault: network.addresses.contracts.vault,\n            weth: network.addresses.tokens.wrappedNativeAsset,\n            staBal3Pool: network.pools?.staBal3Pool,\n            wethStaBal3: network.pools?.wethStaBal3,\n        };\n    }\n\n    private static getPoolDataService(\n        network: BalancerNetworkConfig,\n        sorConfig: BalancerSdkSorConfig,\n        provider: Provider,\n        subgraphClient: SubgraphClient\n    ) {\n        return typeof sorConfig.poolDataService === 'object'\n            ? sorConfig.poolDataService\n            : new SubgraphPoolDataService(\n                  subgraphClient,\n                  provider,\n                  network,\n                  sorConfig\n              );\n    }\n\n    private static getTokenPriceService(\n        network: BalancerNetworkConfig,\n        sorConfig: BalancerSdkSorConfig,\n        subgraphClient: SubgraphClient\n    ): TokenPriceService {\n        if (typeof sorConfig.tokenPriceService === 'object') {\n            return sorConfig.tokenPriceService;\n        } else if (sorConfig.tokenPriceService === 'subgraph') {\n            new SubgraphTokenPriceService(\n                subgraphClient,\n                network.addresses.tokens.wrappedNativeAsset\n            );\n        }\n\n        return new CoingeckoTokenPriceService(network.chainId);\n    }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { SOR, SubgraphPoolBase } from '@balancer-labs/sor';\nimport {\n    BatchSwap,\n    QueryWithSorInput,\n    QueryWithSorOutput,\n    SwapType,\n} from './types';\nimport { queryBatchSwap, queryBatchSwapWithSor } from './queryBatchSwap';\nimport { balancerVault } from '@/lib/constants/config';\nimport { getLimitsForSlippage } from './helpers';\nimport vaultAbi from '@/lib/abi/Vault.json';\nimport { BalancerSdkConfig } from '@/types';\nimport { Sor } from '@/modules/sor/sor.module';\n\nexport class Swaps {\n    private readonly sor: SOR;\n\n    constructor(sorOrConfig: SOR | BalancerSdkConfig) {\n        if (sorOrConfig instanceof SOR) {\n            this.sor = sorOrConfig;\n        } else {\n            this.sor = new Sor(sorOrConfig);\n        }\n    }\n\n    static getLimitsForSlippage(\n        tokensIn: string[],\n        tokensOut: string[],\n        swapType: SwapType,\n        deltas: string[],\n        assets: string[],\n        slippage: string\n    ): string[] {\n        // TO DO - Check best way to do this?\n        const limits = getLimitsForSlippage(\n            tokensIn,\n            tokensOut,\n            swapType,\n            deltas,\n            assets,\n            slippage\n        );\n\n        return limits.map((l) => l.toString());\n    }\n\n    /**\n     * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n     * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n     * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n     * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n     */\n    async fetchPools(): Promise<boolean> {\n        return this.sor.fetchPools();\n    }\n\n    public getPools(): SubgraphPoolBase[] {\n        return this.sor.getPools();\n    }\n\n    /**\n     * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas.\n     * @param batchSwap - BatchSwap information used for query.\n     * @param {SwapType} batchSwap.kind - either exactIn or exactOut.\n     * @param {BatchSwapStep[]} batchSwap.swaps - sequence of swaps.\n     * @param {string[]} batchSwap.assets - array contains the addresses of all assets involved in the swaps.\n     * @returns {Promise<string[]>} Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     */\n    async queryBatchSwap(\n        batchSwap: Pick<BatchSwap, 'kind' | 'swaps' | 'assets'>\n    ): Promise<string[]> {\n        // TO DO - Pull in a ContractsService and use this to pass Vault to queryBatchSwap.\n        const vaultContract = new Contract(\n            balancerVault,\n            vaultAbi,\n            this.sor.provider\n        );\n\n        return await queryBatchSwap(\n            vaultContract,\n            batchSwap.kind,\n            batchSwap.swaps,\n            batchSwap.assets\n        );\n    }\n\n    /**\n     * Uses SOR to create and query a batchSwap.\n     * @param {QueryWithSorInput} queryWithSor - Swap information used for querying using SOR.\n     * @param {string[]} queryWithSor.tokensIn - Array of addresses of assets in.\n     * @param {string[]} queryWithSor.tokensOut - Array of addresses of assets out.\n     * @param {SwapType} queryWithSor.swapType - Type of Swap, ExactIn/Out.\n     * @param {string[]} queryWithSor.amounts - Array of amounts used in swap.\n     * @param {FetchPoolsInput} queryWithSor.fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns {Promise<QueryWithSorOutput>} Returns amount of tokens swaps along with swap and asset info that can be submitted to a batchSwap call.\n     */\n    async queryBatchSwapWithSor(\n        queryWithSor: QueryWithSorInput\n    ): Promise<QueryWithSorOutput> {\n        // TO DO - Pull in a ContractsService and use this to pass Vault to queryBatchSwap.\n        const vaultContract = new Contract(\n            balancerVault,\n            vaultAbi,\n            this.sor.provider\n        );\n\n        return await queryBatchSwapWithSor(\n            this.sor,\n            vaultContract,\n            queryWithSor\n        );\n    }\n}\n","import {\n    EncodeBooMirrorWorldEnterInput,\n    EncodeBooMirrorWorldLeaveInput,\n} from '@/modules/relayer/types';\nimport { Interface } from '@ethersproject/abi';\nimport booMirrorWorldStakingAbi from '@/lib/abi/BooMirrorWorldStaking.json';\n\nexport class BooMirrorWorldStakingService {\n    public encodeEnter(params: EncodeBooMirrorWorldEnterInput): string {\n        const booMirrorWorldStakingLibrary = new Interface(\n            booMirrorWorldStakingAbi\n        );\n\n        return booMirrorWorldStakingLibrary.encodeFunctionData(\n            'booMirrorWorldEnter',\n            [\n                params.sender,\n                params.recipient,\n                params.amount,\n                params.outputReference,\n            ]\n        );\n    }\n\n    public encodeLeave(params: EncodeBooMirrorWorldLeaveInput): string {\n        const booMirrorWorldStakingLibrary = new Interface(\n            booMirrorWorldStakingAbi\n        );\n\n        return booMirrorWorldStakingLibrary.encodeFunctionData(\n            'booMirrorWorldLeave',\n            [\n                params.sender,\n                params.recipient,\n                params.amount,\n                params.outputReference,\n            ]\n        );\n    }\n}\n","import {\n    EncodeFBeetsBarEnterInput,\n    EncodeFBeetsBarLeaveInput,\n} from '@/modules/relayer/types';\nimport { Interface } from '@ethersproject/abi';\nimport fBeetsBarStakingAbi from '@/lib/abi/FBeetsBarStaking.json';\n\nexport class FBeetsBarStakingService {\n    public encodeEnter(params: EncodeFBeetsBarEnterInput): string {\n        const fBeetsBarStakingLibrary = new Interface(fBeetsBarStakingAbi);\n\n        return fBeetsBarStakingLibrary.encodeFunctionData('fBeetsBarEnter', [\n            params.sender,\n            params.recipient,\n            params.amount,\n            params.outputReference,\n        ]);\n    }\n\n    public encodeLeave(params: EncodeFBeetsBarLeaveInput): string {\n        const fBeetsBarStakingLibrary = new Interface(fBeetsBarStakingAbi);\n\n        return fBeetsBarStakingLibrary.encodeFunctionData('fBeetsBarLeave', [\n            params.sender,\n            params.recipient,\n            params.amount,\n            params.outputReference,\n        ]);\n    }\n}\n","import {\n    EncodeMasterChefDepositInput,\n    EncodeMasterChefWithdrawInput,\n} from '@/modules/relayer/types';\nimport { Interface } from '@ethersproject/abi';\nimport masterChefStakingAbi from '@/lib/abi/MasterChefStaking.json';\n\nexport class MasterChefStakingService {\n    public encodeDeposit(params: EncodeMasterChefDepositInput): string {\n        const fBeetsBarStakingLibrary = new Interface(masterChefStakingAbi);\n\n        return fBeetsBarStakingLibrary.encodeFunctionData('masterChefDeposit', [\n            params.sender,\n            params.recipient,\n            params.token,\n            params.pid,\n            params.amount,\n            params.outputReference,\n        ]);\n    }\n\n    public encodeWithdraw(params: EncodeMasterChefWithdrawInput): string {\n        const fBeetsBarStakingLibrary = new Interface(masterChefStakingAbi);\n\n        return fBeetsBarStakingLibrary.encodeFunctionData(\n            'masterChefWithdraw',\n            [\n                params.recipient,\n                params.pid,\n                params.amount,\n                params.outputReference,\n            ]\n        );\n    }\n}\n","import { EncodeUnwrapYearnVaultTokenInput } from '@/modules/relayer/types';\nimport { Interface } from '@ethersproject/abi';\nimport yearnWrappingAbi from '@/lib/abi/YearnWrapping.json';\n\nexport class YearnWrappingService {\n    public encodeWrap(params: EncodeUnwrapYearnVaultTokenInput): string {\n        const yearnWrappingLibrary = new Interface(yearnWrappingAbi);\n\n        return yearnWrappingLibrary.encodeFunctionData('wrapYearnVaultToken', [\n            params.vaultToken,\n            params.sender,\n            params.recipient,\n            params.amount,\n            params.outputReference,\n        ]);\n    }\n\n    public encodeUnwrap(params: EncodeUnwrapYearnVaultTokenInput): string {\n        const yearnWrappingLibrary = new Interface(yearnWrappingAbi);\n\n        return yearnWrappingLibrary.encodeFunctionData(\n            'unwrapYearnVaultToken',\n            [\n                params.vaultToken,\n                params.sender,\n                params.recipient,\n                params.amount,\n                params.outputReference,\n            ]\n        );\n    }\n}\n","import { EncodeUnwrapAaveStaticTokenInput } from '@/modules/relayer/types';\nimport { Interface } from '@ethersproject/abi';\nimport aaveWrappingAbi from '@/lib/abi/AaveWrapping.json';\n\nexport class AaveWrappingService {\n    public encodeUnwrap(params: EncodeUnwrapAaveStaticTokenInput): string {\n        const aaveWrappingLibrary = new Interface(aaveWrappingAbi);\n\n        return aaveWrappingLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n            params.staticToken,\n            params.sender,\n            params.recipient,\n            params.amount,\n            params.toUnderlying,\n            params.outputReferences,\n        ]);\n    }\n}\n","import {\n    EncodeBatchSwapInput,\n    EncodeExitPoolInput,\n    EncodeJoinPoolInput,\n    ExitPoolData,\n} from '@/modules/relayer/types';\nimport { Interface } from '@ethersproject/abi';\nimport relayerLibraryAbi from '@/lib/abi/VaultActions.json';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { ExitPoolRequest } from '@/types';\n\nexport class VaultActionsService {\n    public encodeBatchSwap(params: EncodeBatchSwapInput): string {\n        const relayerLibrary = new Interface(relayerLibraryAbi);\n\n        return relayerLibrary.encodeFunctionData('batchSwap', [\n            params.swapType,\n            params.swaps,\n            params.assets,\n            params.funds,\n            params.limits,\n            params.deadline,\n            params.value,\n            params.outputReferences,\n        ]);\n    }\n\n    public encodeExitPool(params: EncodeExitPoolInput): string {\n        const relayerLibrary = new Interface(relayerLibraryAbi);\n\n        return relayerLibrary.encodeFunctionData('exitPool', [\n            params.poolId,\n            params.poolKind,\n            params.sender,\n            params.recipient,\n            params.exitPoolRequest,\n            params.outputReferences,\n        ]);\n    }\n\n    public encodeJoinPool(params: EncodeJoinPoolInput): string {\n        const relayerLibrary = new Interface(relayerLibraryAbi);\n\n        return relayerLibrary.encodeFunctionData('joinPool', [\n            params.poolId,\n            params.poolKind,\n            params.sender,\n            params.recipient,\n            params.joinPoolRequest,\n            params.value,\n            params.outputReference,\n        ]);\n    }\n\n    public constructExitCall(params: ExitPoolData): string {\n        const {\n            assets,\n            minAmountsOut,\n            userData,\n            toInternalBalance,\n            poolId,\n            poolKind,\n            sender,\n            recipient,\n            outputReferences,\n        } = params;\n\n        const exitPoolRequest: ExitPoolRequest = {\n            assets,\n            minAmountsOut,\n            userData,\n            toInternalBalance,\n        };\n\n        const exitPoolInput: EncodeExitPoolInput = {\n            poolId,\n            poolKind,\n            sender,\n            recipient,\n            outputReferences,\n            exitPoolRequest,\n        };\n\n        return this.encodeExitPool(exitPoolInput);\n    }\n}\n","import { BigNumber, BigNumberish, parseFixed } from '@ethersproject/bignumber';\nimport {\n    AddressZero,\n    MaxUint256,\n    WeiPerEther,\n    Zero,\n} from '@ethersproject/constants';\n\nimport { Swaps } from '@/modules/swaps/swaps.module';\nimport {\n    BatchRelayerJoinPool,\n    ExitAndBatchSwapInput,\n    ExitStablePhantomInput,\n    NestedLinearPool,\n    OutputReference,\n} from './types';\nimport {\n    BalancerLinearPoolType,\n    BalancerNetworkConfig,\n    ExitPoolRequest,\n    TransactionData,\n} from '@/types';\nimport {\n    BatchSwapStep,\n    FetchPoolsInput,\n    FundManagement,\n    QueryWithSorOutput,\n    SwapType,\n} from '../swaps/types';\nimport { SubgraphPoolBase } from '@balancer-labs/sor';\nimport { flatten, keyBy } from 'lodash';\nimport { WeightedPoolEncoder } from '@/pool-weighted/encoder';\nimport { BooMirrorWorldStakingService } from '@/modules/relayer/extensions/boo-mirror-world-staking.service';\nimport { FBeetsBarStakingService } from '@/modules/relayer/extensions/fbeets-bar-staking.service';\nimport { MasterChefStakingService } from '@/modules/relayer/extensions/masterchef-staking.service';\nimport { YearnWrappingService } from '@/modules/relayer/extensions/yearn-wrapping.service';\nimport { AaveWrappingService } from '@/modules/relayer/extensions/aave-wrapping.service';\nimport { VaultActionsService } from '@/modules/relayer/extensions/vault-actions.service';\n\nexport * from './types';\n\nexport class Relayer {\n    static CHAINED_REFERENCE_PREFIX = 'ba10';\n    private vaultActionsService: VaultActionsService;\n    private aaveWrappingService: AaveWrappingService;\n    private booMirrorWorldStaking: BooMirrorWorldStakingService;\n    private fBeetsBarStakingService: FBeetsBarStakingService;\n    private masterChefStakingService: MasterChefStakingService;\n    private yearnWrappingService: YearnWrappingService;\n    private batchRelayerAddress: string;\n\n    constructor(\n        private readonly swaps: Swaps,\n        private readonly config: BalancerNetworkConfig\n    ) {\n        this.vaultActionsService = new VaultActionsService();\n        this.aaveWrappingService = new AaveWrappingService();\n        this.booMirrorWorldStaking = new BooMirrorWorldStakingService();\n        this.fBeetsBarStakingService = new FBeetsBarStakingService();\n        this.masterChefStakingService = new MasterChefStakingService();\n        this.yearnWrappingService = new YearnWrappingService();\n        this.batchRelayerAddress =\n            this.config.addresses.contracts.batchRelayer || '';\n    }\n\n    static toChainedReference(key: BigNumberish): BigNumber {\n        // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n        const paddedPrefix = `0x${Relayer.CHAINED_REFERENCE_PREFIX}${'0'.repeat(\n            64 - Relayer.CHAINED_REFERENCE_PREFIX.length\n        )}`;\n        return BigNumber.from(paddedPrefix).add(key);\n    }\n\n    /**\n     * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n     * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n     * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n     * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n     */\n    async fetchPools(): Promise<boolean> {\n        return this.swaps.fetchPools();\n    }\n\n    public getPools(): SubgraphPoolBase[] {\n        return this.swaps.getPools();\n    }\n\n    private get poolMap(): { [address: string]: SubgraphPoolBase } {\n        const pools = this.getPools();\n\n        return keyBy(pools, 'address');\n    }\n\n    private get linearPoolMap(): { [address: string]: SubgraphPoolBase } {\n        const pools = this.getPools();\n\n        return keyBy(\n            pools.filter((pool) => pool.poolType === 'Linear'),\n            'address'\n        );\n    }\n\n    private get linearPoolWrappedTokenMap(): {\n        [address: string]: SubgraphPoolBase;\n    } {\n        const pools = this.getPools();\n\n        return keyBy(\n            pools.filter((pool) => pool.poolType === 'Linear'),\n            (pool) => pool.tokensList[pool.wrappedIndex || 0]\n        );\n    }\n\n    private get stablePhantomMap(): { [address: string]: SubgraphPoolBase } {\n        const pools = this.getPools();\n\n        return keyBy(\n            pools.filter((pool) => pool.poolType === 'StablePhantom'),\n            'address'\n        );\n    }\n\n    /**\n     * exitPoolAndBatchSwap Chains poolExit with batchSwap to final tokens.\n     * @param {ExitAndBatchSwapInput} params\n     * @param {string} params.exiter - Address used to exit pool.\n     * @param {string} params.swapRecipient - Address that receives final tokens.\n     * @param {string} params.poolId - Id of pool being exited.\n     * @param {string[]} params.exitTokens - Array containing addresses of tokens to receive after exiting pool. (must have the same length and order as the array returned by `getPoolTokens`.)\n     * @param {string} params.userData - Encoded exitPool data.\n     * @param {string[]} params.expectedAmountsOut - Expected amounts of exitTokens to receive when exiting pool.\n     * @param {string[]} params.batchSwapTokensIn - Array containing the addresses of the input to the batchSwap.\n     * @param {string[]} params.batchSwapTokensOut - Array containing the addresses of the output tokens from the batchSwap.\n     * @param {string} params.slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n     * @param {string} params.unwrap - Whether an unrwap should be applied to any wrapped tokens in batchSwapTokensOut\n     * @param {FetchPoolsInput} params.fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns Transaction data with calldata. Outputs.amountsOut has amounts of batchSwapTokensOut returned.\n     */\n    async exitPoolAndBatchSwap(\n        params: ExitAndBatchSwapInput\n    ): Promise<TransactionData> {\n        const pool = this.getRequiredPool(params.poolId);\n        const isWeightedPool = pool.poolType === 'Weighted';\n        const slippageAmountNegative = WeiPerEther.sub(\n            BigNumber.from(params.slippage)\n        );\n        const exits = params.exits.map((exit) => ({\n            ...exit,\n            exitToken: exit.exitToken.toLowerCase(),\n            batchSwapTokenOut: exit.batchSwapTokenOut?.toLowerCase(),\n            // Set min amounts out of exit pool based on slippage\n            exitMinAmountOut: BigNumber.from(exit.exitExpectedAmountOut)\n                .mul(slippageAmountNegative)\n                .div(WeiPerEther)\n                .toString(),\n        }));\n\n        // Output of exit is used as input to swaps\n        const outputReferences = exits.map((exit, index) => ({\n            index,\n            key: Relayer.toChainedReference(index),\n        }));\n\n        const exitsWithBatchSwaps = exits.filter(\n            (exit) => exit.batchSwapTokenOut\n        );\n        const batchSwapTokensIn = exitsWithBatchSwaps.map(\n            (exit) => exit.exitToken\n        );\n        const batchSwapTokensOut = exitsWithBatchSwaps.map(\n            (exit) => exit.batchSwapTokenOut || ''\n        );\n        const poolContainsOnlyPhantomBpts =\n            exits.length === exitsWithBatchSwaps.length;\n\n        const exitCall = this.vaultActionsService.constructExitCall({\n            assets: exits.map((exit) => exit.exitToken),\n            minAmountsOut: exits.map((exit) => exit.exitMinAmountOut),\n            userData: params.userData,\n            toInternalBalance: poolContainsOnlyPhantomBpts, // Creates exitPool request with exit to internal balance to save gas for following swaps\n            poolId: params.poolId,\n            poolKind: 0, // This will always be 0 to match supported Relayer types\n            sender: params.exiter,\n            recipient: params.exiter,\n            outputReferences,\n            exitPoolRequest: {} as ExitPoolRequest,\n        });\n\n        // Use swapsService to get swap info for exitTokens>finalTokens\n        // This will give batchSwap swap paths\n        // Amounts out will be worst case amounts\n        const queryResult = await this.swaps.queryBatchSwapWithSor({\n            tokensIn: batchSwapTokensIn,\n            tokensOut: batchSwapTokensOut,\n            swapType: SwapType.SwapExactIn,\n            amounts: exitsWithBatchSwaps.map((exit) => exit.exitMinAmountOut), // Use minAmountsOut as input to swap to account for slippage\n            fetchPools: params.fetchPools,\n        });\n\n        // Update swap amounts with ref outputs from exitPool\n        queryResult.swaps.forEach((swap) => {\n            const token = queryResult.assets[swap.assetInIndex];\n            const index = exits.findIndex((exit) => exit.exitToken === token);\n\n            if (index !== -1) {\n                swap.amount = outputReferences[index].key.toString();\n            }\n        });\n\n        // const tempDeltas = ['10096980', '0', '0', '10199896999999482390', '0']; // Useful for debug\n\n        // Replace tokenIn delta for swaps with amount + slippage.\n        // This gives tolerance for limit incase amount out of exitPool is larger min,\n        const slippageAmountPositive = WeiPerEther.add(params.slippage);\n        exits.forEach((exit) => {\n            const index = queryResult.assets\n                .map((elem) => elem.toLowerCase())\n                .indexOf(exit.exitToken.toLowerCase());\n\n            if (index !== -1) {\n                queryResult.deltas[index] = BigNumber.from(\n                    exit.exitExpectedAmountOut\n                )\n                    .mul(slippageAmountPositive)\n                    .div(WeiPerEther)\n                    .toString();\n            }\n        });\n\n        // Creates limit array.\n        // Slippage set to 0. Already accounted for as swap used amounts out of pool with worst case slippage.\n        const limits = Swaps.getLimitsForSlippage(\n            batchSwapTokensIn, // tokensIn\n            batchSwapTokensOut, // tokensOut\n            SwapType.SwapExactIn,\n            queryResult.deltas, // tempDeltas // Useful for debug\n            queryResult.assets,\n            '0'\n        );\n\n        // Creates fund management using internal balance as source of tokens\n        const funds: FundManagement = {\n            sender: params.exiter,\n            recipient: params.swapRecipient,\n            fromInternalBalance: poolContainsOnlyPhantomBpts,\n            toInternalBalance: false,\n        };\n\n        let additionalCalls: string[] = [];\n        let unwrapOutputReferences: OutputReference[] = [];\n\n        if (params.unwrap) {\n            //find any wrapped tokens in the query result assets\n            const wrappedTokens = Object.keys(\n                this.linearPoolWrappedTokenMap\n            ).filter((wrappedToken) =>\n                queryResult.assets.includes(wrappedToken)\n            );\n\n            const { unwrapCalls, outputReferences } = this.encodeUnwrapCalls(\n                wrappedTokens,\n                queryResult.assets,\n                funds\n            );\n\n            additionalCalls = unwrapCalls;\n            unwrapOutputReferences = outputReferences;\n\n            //update the return amounts to represent the unwrappedAmount\n            queryResult.returnAmounts = queryResult.returnAmounts.map(\n                (returnAmount, i) => {\n                    const asset = batchSwapTokensOut[i].toLowerCase();\n\n                    if (this.linearPoolWrappedTokenMap[asset]) {\n                        const linearPool =\n                            this.linearPoolWrappedTokenMap[asset];\n                        const wrappedToken =\n                            linearPool.tokens[linearPool.wrappedIndex || 0];\n                        const wrappedDecimals = wrappedToken.decimals;\n                        const priceRate = parseFixed(\n                            wrappedToken.priceRate,\n                            wrappedDecimals\n                        );\n\n                        return BigNumber.from(returnAmount)\n                            .mul(priceRate)\n                            .div(BigNumber.from(10).pow(wrappedDecimals))\n                            .toString();\n                    }\n\n                    return returnAmount;\n                }\n            );\n        }\n\n        const encodedBatchSwap = this.vaultActionsService.encodeBatchSwap({\n            swapType: SwapType.SwapExactIn,\n            swaps: queryResult.swaps,\n            assets: queryResult.assets,\n            funds: funds,\n            limits: limits.map((l) => l.toString()),\n            deadline: MaxUint256,\n            value: '0',\n            outputReferences: unwrapOutputReferences,\n        });\n\n        // Return amounts from swap\n        const calls = [exitCall, encodedBatchSwap, ...additionalCalls];\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsOut: exits.map((exit) => {\n                    //this exit does not have a batch swap, return the expected amount out\n                    if (!exit.batchSwapTokenOut) {\n                        return exit.exitExpectedAmountOut;\n                    }\n\n                    const index = exitsWithBatchSwaps.findIndex(\n                        (exitWithBatchSwap) =>\n                            exitWithBatchSwap.exitToken === exit.exitToken\n                    );\n\n                    //Add the slippage back to the amountsOut so that it reflects the expected amount\n                    //rather than worst case\n                    return BigNumber.from(queryResult.returnAmounts[index])\n                        .mul(slippageAmountPositive)\n                        .div(WeiPerEther)\n                        .toString();\n                }),\n            },\n        };\n    }\n\n    public async joinPool({\n        poolId,\n        tokens,\n        bptOut,\n        fetchPools,\n        slippage,\n        funds,\n        farmId,\n        mintFBeets,\n    }: BatchRelayerJoinPool): Promise<TransactionData> {\n        const stakeBptInFarm = typeof farmId === 'number';\n        const wrappedNativeAsset =\n            this.config.addresses.tokens.wrappedNativeAsset.toLowerCase();\n        const pool = this.getRequiredPool(poolId);\n        const nestedLinearPools = this.getNestedLinearPools(pool);\n        const isWeightedPool = pool.poolType === 'Weighted';\n        const hasNestedLinearPools = nestedLinearPools.length > 0;\n        const calls: string[] = [];\n        let queryResult: null | QueryWithSorOutput = null;\n        const nativeToken = tokens.find(\n            (token) => token.address === AddressZero\n        );\n        const nativeAssetValue = nativeToken\n            ? parseFixed(nativeToken.amount, 18).toString()\n            : '0';\n\n        //TODO: if there are no nested pools, we don't need to use the batch relayer\n        if (hasNestedLinearPools) {\n            //if there are nested linear pools, the first step is to swap mainTokens for linear or phantom stable BPT\n            const tokensIn = nestedLinearPools.map((item) =>\n                nativeToken && item.mainToken === wrappedNativeAsset\n                    ? AddressZero\n                    : item.mainToken\n            );\n\n            const tokensOut = nestedLinearPools.map(\n                (item) => item.poolTokenAddress\n            );\n            const amounts = tokensIn.map((tokenAddress) => {\n                if (tokenAddress === AddressZero) {\n                    return nativeAssetValue;\n                }\n\n                const token = tokens.find(\n                    (token) =>\n                        token.address.toLowerCase() ===\n                        tokenAddress.toLowerCase()\n                );\n\n                return this.getTokenAmountScaled(\n                    tokenAddress,\n                    token?.amount || '0'\n                );\n            });\n\n            queryResult = await this.swaps.queryBatchSwapWithSor({\n                tokensIn,\n                tokensOut,\n                swapType: SwapType.SwapExactIn,\n                amounts,\n                fetchPools,\n            });\n\n            const limits = Swaps.getLimitsForSlippage(\n                tokensIn,\n                tokensOut,\n                SwapType.SwapExactIn,\n                queryResult.deltas,\n                queryResult.assets,\n                slippage\n            );\n\n            const encodedBatchSwap = this.vaultActionsService.encodeBatchSwap({\n                swapType: SwapType.SwapExactIn,\n                swaps: queryResult.swaps,\n                assets: queryResult.assets,\n                funds: {\n                    ...funds,\n                    /*toInternalBalance:\n                        stakeBptInFarm || isWeightedPool\n                            ? true\n                            : funds.toInternalBalance,*/\n                    toInternalBalance: isWeightedPool\n                        ? true\n                        : funds.toInternalBalance,\n                },\n                limits: limits.map((l) => l.toString()),\n                deadline: MaxUint256,\n                value: nativeAssetValue,\n                outputReferences: queryResult.assets.map((asset, index) => ({\n                    index,\n                    key: Relayer.toChainedReference(index),\n                })),\n            });\n\n            calls.push(encodedBatchSwap);\n        }\n\n        //if this is a weighted pool, we need to also join the pool\n        if (isWeightedPool) {\n            const joinHasNativeAsset =\n                pool.tokensList.find((token) => token === wrappedNativeAsset) &&\n                nativeAssetValue !== '0';\n\n            const amountsIn = pool.tokensList.map((tokenAddress) => {\n                const token = tokens.find((token) => {\n                    if (\n                        token.address === AddressZero &&\n                        tokenAddress.toLowerCase() === wrappedNativeAsset\n                    ) {\n                        return true;\n                    }\n\n                    return (\n                        token.address.toLowerCase() ===\n                        tokenAddress.toLowerCase()\n                    );\n                });\n\n                if (token) {\n                    return this.getTokenAmountScaled(\n                        tokenAddress,\n                        token?.amount || '0'\n                    );\n                }\n\n                //This token is a nested BPT, not a mainToken\n                //Replace the amount with the chained reference value\n                const index =\n                    queryResult?.assets.findIndex(\n                        (asset) =>\n                            asset.toLowerCase() === tokenAddress.toLowerCase()\n                    ) || -1;\n\n                //if the return amount is 0, we dont pass on the chained reference\n                if (index === -1 || queryResult?.deltas[index] === '0') {\n                    return '0';\n                }\n\n                return Relayer.toChainedReference(index || 0);\n            });\n\n            const encodedJoinPool = this.vaultActionsService.encodeJoinPool({\n                poolId: pool.id,\n                poolKind: 0,\n                sender: funds.sender,\n                recipient:\n                    stakeBptInFarm || mintFBeets\n                        ? this.batchRelayerAddress\n                        : funds.recipient,\n                joinPoolRequest: {\n                    assets: joinHasNativeAsset\n                        ? pool.tokensList.map((token) =>\n                              token === wrappedNativeAsset ? AddressZero : token\n                          )\n                        : pool.tokensList,\n                    maxAmountsIn: amountsIn,\n                    userData: WeightedPoolEncoder.joinExactTokensInForBPTOut(\n                        amountsIn,\n                        bptOut\n                    ),\n                    fromInternalBalance: hasNestedLinearPools\n                        ? true\n                        : funds.fromInternalBalance,\n                },\n                value: joinHasNativeAsset ? nativeAssetValue : Zero,\n                outputReference: stakeBptInFarm\n                    ? Relayer.toChainedReference(0)\n                    : Zero,\n            });\n\n            calls.push(encodedJoinPool);\n        }\n\n        if (mintFBeets) {\n            calls.push(\n                this.fBeetsBarStakingService.encodeEnter({\n                    sender: this.batchRelayerAddress,\n                    recipient: stakeBptInFarm\n                        ? this.batchRelayerAddress\n                        : funds.recipient,\n                    amount: Relayer.toChainedReference(0),\n                    outputReference: Relayer.toChainedReference(0),\n                })\n            );\n        }\n\n        if (stakeBptInFarm) {\n            calls.push(\n                this.masterChefStakingService.encodeDeposit({\n                    sender: this.batchRelayerAddress,\n                    recipient: funds.recipient,\n                    token:\n                        mintFBeets && this.config.fBeets\n                            ? this.config.fBeets.address\n                            : pool.address,\n                    pid:\n                        mintFBeets && this.config.fBeets\n                            ? this.config.fBeets.farmId\n                            : farmId,\n                    amount: Relayer.toChainedReference(0),\n                    outputReference: Zero,\n                })\n            );\n        }\n\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {},\n        };\n    }\n\n    private getNestedLinearPools(pool: SubgraphPoolBase): NestedLinearPool[] {\n        const linearPools: NestedLinearPool[] = [];\n\n        for (const token of pool.tokensList) {\n            if (this.linearPoolMap[token]) {\n                const linearPool = this.linearPoolMap[token];\n                const mainIdx = linearPool.mainIndex || 0;\n\n                linearPools.push({\n                    pool: linearPool,\n                    mainToken: linearPool.tokensList[mainIdx],\n                    wrappedToken:\n                        linearPool.tokensList[linearPool.wrappedIndex || 0],\n                    poolTokenAddress: linearPool.address,\n                });\n            } else if (this.stablePhantomMap[token]) {\n                for (const stablePhantomToken of this.stablePhantomMap[token]\n                    .tokensList) {\n                    if (this.linearPoolMap[stablePhantomToken]) {\n                        const linearPool =\n                            this.linearPoolMap[stablePhantomToken];\n                        const mainIdx = linearPool.mainIndex || 0;\n\n                        linearPools.push({\n                            pool: linearPool,\n                            mainToken: linearPool.tokensList[mainIdx],\n                            wrappedToken:\n                                linearPool.tokensList[\n                                    linearPool.wrappedIndex || 0\n                                ],\n                            poolTokenAddress:\n                                this.stablePhantomMap[token].address,\n                        });\n                    }\n                }\n            }\n        }\n\n        return linearPools;\n    }\n\n    private getRequiredPool(poolId: string): SubgraphPoolBase {\n        const pools = this.getPools();\n        const pool = pools.find((pool) => pool.id === poolId);\n\n        if (!pool) {\n            throw new Error('No pool found with id: ' + poolId);\n        }\n\n        return pool;\n    }\n\n    private getRequiredLinearPoolForWrappedToken(\n        wrappedToken: string\n    ): SubgraphPoolBase {\n        const pools = this.getPools();\n        const pool = pools.find(\n            (pool) =>\n                typeof pool.wrappedIndex === 'number' &&\n                pool.tokensList[pool.wrappedIndex] ===\n                    wrappedToken.toLowerCase()\n        );\n\n        if (!pool) {\n            throw new Error(\n                'No linear pool found for wrapped token: ' + wrappedToken\n            );\n        }\n\n        return pool;\n    }\n\n    private getTokenAmountScaled(tokenAddress: string, amount: string): string {\n        const pools = this.getPools();\n        const tokens = flatten(pools.map((pool) => pool.tokens));\n        const token = tokens.find(\n            (token) =>\n                token.address?.toLowerCase() === tokenAddress.toLowerCase()\n        );\n\n        if (!token) {\n            throw new Error('No token found with address: ' + tokenAddress);\n        }\n\n        return parseFixed(amount, token.decimals).toString();\n    }\n\n    private getLinearPoolType(pool: SubgraphPoolBase): BalancerLinearPoolType {\n        const linearFactories = this.config.addresses.linearFactories;\n\n        if (linearFactories && pool.factory && linearFactories[pool.factory]) {\n            return linearFactories[pool.factory];\n        }\n\n        return 'aave';\n    }\n\n    /**\n     * swapUnwrapExactIn Finds swaps for tokenIn>wrapped tokens and chains with unwrap to underlying stable.\n     * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n     * @param {string[]} wrappedTokens - array contains the addresses of the wrapped tokens that tokenIn will be swapped to. These will be unwrapped.\n     * @param {string[]} amountsIn - amounts to be swapped for each token in.\n     * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n     * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n     * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n     * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns Transaction data with calldata. Outputs.amountsOut has final amounts out of unwrapped tokens.\n     */\n    async swapUnwrapExactIn(\n        tokensIn: string[],\n        wrappedTokens: string[],\n        amountsIn: string[],\n        rates: string[],\n        funds: FundManagement,\n        slippage: string,\n        fetchPools: FetchPoolsInput = {\n            fetchPools: true,\n            fetchOnChain: false,\n        }\n    ): Promise<TransactionData> {\n        // Use swapsService to get swap info for tokensIn>wrappedTokens\n        const queryResult = await this.swaps.queryBatchSwapWithSor({\n            tokensIn,\n            tokensOut: wrappedTokens,\n            swapType: SwapType.SwapExactIn,\n            amounts: amountsIn,\n            fetchPools,\n        });\n\n        // Gets limits array for tokensIn>wrappedTokens based on input slippage\n        const limits = Swaps.getLimitsForSlippage(\n            tokensIn, // tokensIn\n            wrappedTokens, // tokensOut\n            SwapType.SwapExactIn,\n            queryResult.deltas,\n            queryResult.assets,\n            slippage\n        );\n\n        const calls = this.encodeSwapUnwrap(\n            wrappedTokens,\n            SwapType.SwapExactIn,\n            queryResult.swaps,\n            queryResult.assets,\n            funds,\n            limits\n        );\n\n        const amountsUnwrapped = queryResult.returnAmounts.map(\n            (amountWrapped, i) =>\n                BigNumber.from(amountWrapped)\n                    .abs()\n                    .mul(rates[i])\n                    .div(WeiPerEther)\n                    .toString()\n        );\n\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsOut: amountsUnwrapped,\n            },\n        };\n    }\n\n    async swapAndUnwrapStablePhantomPool({\n        poolId,\n        slippage,\n        exits,\n        account,\n    }: ExitStablePhantomInput): Promise<TransactionData> {\n        const pool = this.getRequiredPool(poolId);\n        const linearPools = this.getNestedLinearPools(pool);\n        const tokensIn = exits.map(() => pool.address.toLowerCase());\n        const batchSwapTokensOut = exits.map((exit) => {\n            if (!exit.unwrap) {\n                return exit.tokenOut;\n            }\n\n            const linearPool = linearPools.find(\n                (linearPool) =>\n                    linearPool.mainToken.toLowerCase() ===\n                    exit.tokenOut.toLowerCase()\n            );\n\n            return linearPool?.wrappedToken ?? exit.tokenOut;\n        });\n\n        // Use swapsService to get swap info for tokensIn>wrappedTokens\n        const queryResult = await this.swaps.queryBatchSwapWithSor({\n            tokensIn,\n            tokensOut: batchSwapTokensOut,\n            amounts: exits.map((exit) => exit.bptAmountIn),\n            swapType: SwapType.SwapExactIn,\n            fetchPools: {\n                fetchPools: true,\n                fetchOnChain: true,\n            },\n        });\n\n        // Gets limits array for tokensIn>wrappedTokens based on input slippage\n        const limits = Swaps.getLimitsForSlippage(\n            tokensIn, // tokensIn\n            batchSwapTokensOut, // tokensOut\n            SwapType.SwapExactIn,\n            queryResult.deltas,\n            queryResult.assets,\n            slippage\n        );\n\n        const wrappedTokens = batchSwapTokensOut.filter((batchSwapTokenOut) => {\n            const linearPool = linearPools.find(\n                (linearPool) =>\n                    linearPool.wrappedToken.toLowerCase() === batchSwapTokenOut\n            );\n\n            return !!linearPool;\n        });\n\n        const funds = {\n            sender: account,\n            //if all tokens are wrapped, send the output to the batch relayer\n            recipient:\n                wrappedTokens.length === batchSwapTokensOut.length\n                    ? this.batchRelayerAddress\n                    : account,\n            fromInternalBalance: false,\n            toInternalBalance: false,\n        };\n\n        const { unwrapCalls, outputReferences } = this.encodeUnwrapCalls(\n            wrappedTokens,\n            queryResult.assets,\n            funds\n        );\n\n        const encodedBatchSwap = this.vaultActionsService.encodeBatchSwap({\n            swapType: SwapType.SwapExactIn,\n            swaps: queryResult.swaps,\n            assets: queryResult.assets,\n            funds,\n            limits: limits.map((l) => l.toString()),\n            deadline: MaxUint256,\n            value: '0',\n            outputReferences: outputReferences,\n        });\n\n        const calls = [encodedBatchSwap, ...unwrapCalls];\n\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsOut: queryResult.returnAmounts.map((amount, index) => {\n                    const asset = batchSwapTokensOut[index];\n                    const linearPool = linearPools.find(\n                        (linearPool) =>\n                            linearPool.wrappedToken.toLowerCase() ===\n                            asset.toLowerCase()\n                    );\n\n                    if (linearPool) {\n                        const wrappedRate =\n                            linearPool.pool.tokens[\n                                linearPool.pool.wrappedIndex || 0\n                            ].priceRate;\n                        const wrappedRateScaled = parseFixed(wrappedRate, 18);\n\n                        return BigNumber.from(amount)\n                            .mul(wrappedRateScaled)\n                            .div(WeiPerEther)\n                            .toString();\n                    }\n\n                    return amount.toString();\n                }),\n            },\n        };\n    }\n\n    /**\n     * swapUnwrapExactOut Finds swaps for tokenIn>wrapped tokens and chains with unwrap to underlying stable.\n     * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n     * @param {string[]} wrappedTokens - array contains the addresses of the wrapped tokens that tokenIn will be swapped to. These will be unwrapped.\n     * @param {string[]} amountsUnwrapped - amounts of unwrapped tokens out.\n     * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n     * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n     * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n     * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns Transaction data with calldata. Outputs.amountsIn has the amounts of tokensIn.\n     */\n    async swapUnwrapExactOut(\n        tokensIn: string[],\n        wrappedTokens: string[],\n        amountsUnwrapped: string[],\n        rates: string[],\n        funds: FundManagement,\n        slippage: string,\n        fetchPools: FetchPoolsInput = {\n            fetchPools: true,\n            fetchOnChain: false,\n        }\n    ): Promise<TransactionData> {\n        const amountsWrapped = amountsUnwrapped.map((amountInwrapped, i) =>\n            BigNumber.from(amountInwrapped)\n                .mul(WeiPerEther)\n                .div(rates[i])\n                .toString()\n        );\n\n        // Use swapsService to get swap info for tokensIn>wrappedTokens\n        const queryResult = await this.swaps.queryBatchSwapWithSor({\n            tokensIn,\n            tokensOut: wrappedTokens,\n            swapType: SwapType.SwapExactOut,\n            amounts: amountsWrapped,\n            fetchPools,\n        });\n\n        // Gets limits array for tokensIn>wrappedTokens based on input slippage\n        const limits = Swaps.getLimitsForSlippage(\n            tokensIn, // tokensIn\n            wrappedTokens, // tokensOut\n            SwapType.SwapExactOut,\n            queryResult.deltas,\n            queryResult.assets,\n            slippage\n        );\n\n        const calls = this.encodeSwapUnwrap(\n            wrappedTokens,\n            SwapType.SwapExactOut,\n            queryResult.swaps,\n            queryResult.assets,\n            funds,\n            limits\n        );\n\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsIn: queryResult.returnAmounts.map((amount) =>\n                    amount.toString()\n                ),\n            },\n        };\n    }\n\n    /**\n     * Creates encoded multicalls using swap outputs as input amounts for token unwrap.\n     * @param wrappedTokens\n     * @param swapType\n     * @param swaps\n     * @param assets\n     * @param funds\n     * @param limits\n     * @returns\n     */\n    encodeSwapUnwrap(\n        wrappedTokens: string[],\n        swapType: SwapType,\n        swaps: BatchSwapStep[],\n        assets: string[],\n        funds: FundManagement,\n        limits: BigNumberish[]\n    ): string[] {\n        // Output of swaps (wrappedTokens) is used as input to unwrap\n        // Need indices of output tokens and outputReferences need to be made with those as key\n        const { unwrapCalls, outputReferences } = this.encodeUnwrapCalls(\n            wrappedTokens,\n            assets,\n            funds\n        );\n\n        const encodedBatchSwap = this.vaultActionsService.encodeBatchSwap({\n            swapType: swapType,\n            swaps: swaps,\n            assets: assets,\n            funds: funds, // Note - this should have Relayer as recipient\n            limits: limits.map((l) => l.toString()),\n            deadline: MaxUint256,\n            value: '0',\n            outputReferences: outputReferences,\n        });\n\n        return [encodedBatchSwap, ...unwrapCalls];\n    }\n\n    encodeUnwrapCalls(\n        wrappedTokens: string[],\n        assets: string[],\n        funds: FundManagement\n    ) {\n        const outputReferences: OutputReference[] = [];\n        const unwrapCalls: string[] = [];\n\n        wrappedTokens.forEach((wrappedToken, i) => {\n            const linearPool =\n                this.getRequiredLinearPoolForWrappedToken(wrappedToken);\n            const linearPoolType = this.getLinearPoolType(linearPool);\n\n            // Find index of wrappedToken in asset array. This is used as ref in Relayer.\n            const index = assets.findIndex(\n                (token) => token.toLowerCase() === wrappedToken.toLowerCase()\n            );\n            // There may be cases where swap isn't possible for wrappedToken\n            if (index === -1) return;\n\n            const key = Relayer.toChainedReference(i);\n\n            outputReferences.push({\n                index: index,\n                key: key,\n            });\n\n            // console.log(`Unwrapping ${wrappedToken} with amt: ${key.toHexString()}`);\n\n            switch (linearPoolType) {\n                case 'aave':\n                    unwrapCalls.push(\n                        this.aaveWrappingService.encodeUnwrap({\n                            staticToken: wrappedToken,\n                            sender: funds.recipient, // This should be relayer\n                            recipient: funds.sender, // This will be caller\n                            amount: key, // Use output of swap as input for unwrap\n                            toUnderlying: true,\n                            outputReferences: 0,\n                        })\n                    );\n                    break;\n                case 'yearn':\n                    unwrapCalls.push(\n                        this.yearnWrappingService.encodeUnwrap({\n                            vaultToken: wrappedToken,\n                            sender: funds.recipient, // This should be relayer\n                            recipient: funds.sender, // This will be caller\n                            amount: key, // Use output of swap as input for unwrap\n                            outputReference: 0,\n                        })\n                    );\n                    break;\n                case 'boo':\n                    unwrapCalls.push(\n                        this.booMirrorWorldStaking.encodeLeave({\n                            sender: funds.recipient, // This should be relayer\n                            recipient: funds.sender, // This will be caller\n                            amount: key, // Use output of swap as input for unwrap\n                            outputReference: 0,\n                        })\n                    );\n                    break;\n            }\n        });\n\n        return { unwrapCalls, outputReferences };\n    }\n}\n","import { BalancerSdkConfig } from '@/types';\nimport { GraphQLClient } from 'graphql-request';\nimport { getNetworkConfig } from '../sdk.helpers';\nimport { getSdk } from './generated/balancer-subgraph-types';\nimport { SubgraphClient } from './subgraph';\n\nexport class Subgraph {\n    public readonly url: string;\n    public readonly client: SubgraphClient;\n\n    constructor(config: BalancerSdkConfig) {\n        this.url = getNetworkConfig(config).urls.subgraph;\n        this.client = this.initClient();\n    }\n\n    private initClient(): SubgraphClient {\n        const client = new GraphQLClient(this.url);\n        return getSdk(client);\n    }\n}\n","import { BalancerSdkConfig, BalancerNetworkConfig } from '@/types';\nimport { Swaps } from './swaps/swaps.module';\nimport { Relayer } from './relayer/relayer.module';\nimport { Subgraph } from './subgraph/subgraph.module';\nimport { Sor } from './sor/sor.module';\nimport { getNetworkConfig } from './sdk.helpers';\n\nexport class BalancerSDK {\n    public readonly swaps: Swaps;\n    public readonly relayer: Relayer;\n    public readonly sor: Sor;\n    public readonly subgraph: Subgraph;\n\n    constructor(public config: BalancerSdkConfig) {\n        this.sor = new Sor(this.config);\n        this.subgraph = new Subgraph(this.config);\n        this.swaps = new Swaps(this.sor);\n        this.relayer = new Relayer(this.swaps, this.networkConfig);\n    }\n\n    public get networkConfig(): BalancerNetworkConfig {\n        return getNetworkConfig(this.config);\n    }\n}\n"],"names":["StablePoolJoinKind","StablePhantomPoolJoinKind","StablePoolExitKind","defaultAbiCoder","WeightedPoolJoinKind","WeightedPoolExitKind","ONE","Zero","BigNumber","Signer","RelayerAction","hexZeroPad","hexValue","splitSignature","MAX_DEADLINE","AddressZero","getAddress","Contract","aTokenRateProviderAbi","PoolSpecialization","UserBalanceOpKind","PoolBalanceOpKind","SwapType","WeiPerEther","Network","sor","SwapTypes","parse","gql","GraphQLClient","abi","Interface","set","PoolFilter","formatFixed","parseInt","axios","keyBy","SOR","JsonRpcProvider","parseFixed","MaxUint256","flatten"],"mappings":"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"}